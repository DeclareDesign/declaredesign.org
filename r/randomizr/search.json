[{"path":[]},{"path":"https://declaredesign.org/r/randomizr/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, gender identity expression, level experience, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://declaredesign.org/r/randomizr/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://declaredesign.org/r/randomizr/CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://declaredesign.org/r/randomizr/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://declaredesign.org/r/randomizr/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team abuse@declaredesign.org. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://declaredesign.org/r/randomizr/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available http://contributor-covenant.org/version/1/4","code":""},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"a-hypothetical-experiment","dir":"Articles","previous_headings":"","what":"A hypothetical experiment","title":"Design and Analysis of Experiments with randomizr","text":"Throughout vignette, ’ll pretend ’re conducting experiment among 592 individuals built-HairEyeColor dataset. ’ll see, many ways randomly assign subjects treatments. ’ll step five common designs, associated one five randomizr functions: simple_ra(), complete_ra(), block_ra(), cluster_ra(), block_and_cluster_ra(). first need transform dataset, row describe type subject, new dataset row describes individual subject. Typically, researchers know basic information subjects deploying treatment. example, usually know many subjects experimental sample (N), usually know basic demographic information subject. new dataset 592 subjects. three pretreatment covariates, Hair, Eye, Sex, describe hair color, eye color, gender subject. now need create simulated potential outcomes. ’ll call untreated outcome Y0 ’ll call treated outcome Y1. Imagine absence intervention, outcome (Y0) correlated pretreatment covariates. Imagine effectiveness program varies according covariates, .e., difference Y1 Y0 correlated pretreatment covariates. really running experiment, observe either Y0 Y1 subject, since simulating, generate . inferential target average treatment effect (ATE), defined average difference Y0 Y1. now ready allocate treatment assignments subjects. Let’s start contrasting simple complete random assignment.","code":"# Load built-in dataset data(HairEyeColor) HairEyeColor <- data.frame(HairEyeColor)  # Transform so each row is a subject # Columns describe subject's hair color, eye color, and gender hec <- HairEyeColor[rep(1:nrow(HairEyeColor),                         times = HairEyeColor$Freq), 1:3]  N <- nrow(hec)  # Fix the rownames rownames(hec) <- NULL # Set a seed for reproducability set.seed(343)  # Create untreated and treated outcomes for all subjects hec <- within(hec,{   Y0 <- rnorm(n = N,mean = (2*as.numeric(Hair) + -4*as.numeric(Eye) + -6*as.numeric(Sex)), sd = 5)   Y1 <- Y0 + 6*as.numeric(Hair) + 4*as.numeric(Eye) + 2*as.numeric(Sex) })  # Calculate true ATE with(hec, mean(Y1 - Y0)) #> [1] 25"},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"simple-random-assignment","dir":"Articles","previous_headings":"A hypothetical experiment","what":"Simple random assignment","title":"Design and Analysis of Experiments with randomizr","text":"Simple random assignment assigns subjects treatment equal probability flipping (weighted) coin subject. main trouble simple random assignment number subjects assigned treatment random number - depending random assignment, different number subjects might assigned group. simple_ra() function one required argument N, total number subjects. arguments specified, simple_ra() assumes two-group design 0.50 probability assignment. change probability assignment, specify prob argument: specify num_arms without changing prob_each, simple_ra() assume equal probabilities across arms. can also just specify probabilities multiple arms. probabilities must sum 1. can also name treatment arms.","code":"library(randomizr) Z <- simple_ra(N = N) table(Z) Z <- simple_ra(N = N, prob = 0.30) table(Z) Z <- simple_ra(N = N, num_arms = 3) table(Z) Z <- simple_ra(N = N, prob_each = c(.2, .2, .6)) table(Z) Z <- simple_ra(N = N, prob_each = c(.2, .2, .6),                conditions=c(\"control\", \"placebo\", \"treatment\")) table(Z)"},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"complete-random-assignment","dir":"Articles","previous_headings":"A hypothetical experiment","what":"Complete random assignment","title":"Design and Analysis of Experiments with randomizr","text":"Complete random assignment similar simple random assignment, except researcher can specify exactly many units assigned condition. syntax complete_ra() similar simple_ra(). argument m number units assigned treatment two-arm designs; analogous simple_ra()’s prob. Similarly, argument m_each analogous prob_each. specify N, complete_ra() assigns exactly half subjects treatment. change number units assigned, specify m argument: specify multiple arms, complete_ra() assign equal (within rounding) number units treatment. can also specify exactly many units assigned arm. total m_each must equal N. can also name treatment arms.","code":"Z <- complete_ra(N = N) table(Z) Z <- complete_ra(N = N, m = 200) table(Z) Z <- complete_ra(N = N, num_arms = 3) table(Z) Z <- complete_ra(N = N, m_each = c(100, 200, 292)) table(Z) Z <- complete_ra(N = N, m_each = c(100, 200, 292),                conditions = c(\"control\", \"placebo\", \"treatment\")) table(Z)"},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"simple-and-complete-random-assignment-compared","dir":"Articles","previous_headings":"A hypothetical experiment","what":"Simple and Complete random assignment compared","title":"Design and Analysis of Experiments with randomizr","text":"use simple_ra() versus complete_ra()? Basically, number units known beforehand, complete_ra() always preferred, two reasons: 1. Researchers can plan exactly many treatments deployed. 2. standard errors associated complete random assignment generally smaller, increasing experimental power. Since need know N beforehand order use simple_ra(), may seem like useless function. Sometimes, however, random assignment isn’t directly researcher’s control. example, deploying survey experiment platform like Qualtrics, simple random assignment possibility due inflexibility built-random assignment tools. reconstructing random assignment analysis experiment conducted, simple_ra() provides convenient way . demonstrate complete_ra() superior simple_ra(), let’s conduct small simulation HairEyeColor dataset. standard error estimate defined standard deviation sampling distribution estimator. standard errors estimated (.e., using summary() command model fit), estimated using approximation. simulation allows us measure standard error directly, since vectors simple_ests complete_ests describe sampling distribution design. 0.6 0.6 simulation complete random assignment led -0.59% decrease sampling variability. decrease obtained small design tweak costs researcher essentially nothing.","code":"sims <- 1000  # Set up empty vectors to collect results simple_ests <- rep(NA, sims) complete_ests <- rep(NA, sims)  # Loop through simulation 2000 times for(i in 1:sims){   hec <- within(hec,{          # Conduct both kinds of random assignment     Z_simple <- simple_ra(N = N)     Z_complete <- complete_ra(N = N)          # Reveal observed potential outcomes     Y_simple <- Y1*Z_simple + Y0*(1-Z_simple)     Y_complete <- Y1*Z_complete + Y0*(1-Z_complete)     })      # Estimate ATE under both models   fit_simple <- lm(Y_simple ~ Z_simple, data=hec)   fit_complete <- lm(Y_complete ~ Z_complete, data=hec)      # Save the estimates   simple_ests[i] <- coef(fit_simple)[2]   complete_ests[i] <- coef(fit_complete)[2] } sd(simple_ests) sd(complete_ests)"},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"block-random-assignment","dir":"Articles","previous_headings":"A hypothetical experiment","what":"Block random assignment","title":"Design and Analysis of Experiments with randomizr","text":"Block random assignment (sometimes known stratified random assignment) powerful tool used well. design, subjects sorted blocks (strata) according pre-treatment covariates, complete random assignment conducted within block. example, researcher might block gender, assigning exactly half men exactly half women treatment. block? first reason signal future readers treatment effect heterogeneity may interest: treatment effect different men versus women? course, heterogeneity explored complete random assignment used, blocking covariate defends researcher (somewhat) claims data dredging. second reason increase precision. blocking variables predictive outcome (.e., correlated outcome), blocking may help decrease sampling variability. ’s important, however, overstate advantages. gains blocked design can often realized covariate adjustment alone. Blocking can also produce complications estimation. Blocking can produce different probabilities assignment different subjects. complication typically addressed one two ways: “controlling blocks” regression context, inverse probability weights (IPW), units weighted inverse probability unit condition . required argument block_ra() blocks, vector length N describes block unit belongs . blocks can factor, character, numeric variable. arguments specified, block_ra() assigns approximately equal proportion block treatment. multiple treatment arms, use num_arms argument, without conditions argument block_ra() provides number ways adjust number subjects assigned conditions. prob_each argument describes proportion block assigned treatment arm. Note course, block_ra() still uses complete random assignment within block; appropriate number units assign treatment within block automatically determined. finer control, use block_m_each argument, takes matrix many rows blocks, many columns treatment conditions. Remember rows order sort(unique(blocks)), command good run constructing block_m_each matrix. example , different blocks different probabilities assignment treatment. case, people Black hair 30/108 = 27.8% chance treated, Brown hair 100/286 = 35.0% change, etc. Left unaddressed, discrepancy bias treatment effects. can see directly declare_ra() function. two common ways address problem: LSDV (Least-Squares Dummy Variable, also known “control blocks”) IPW (Inverse-probability weights). following code snippet shows use either LSDV approach IPW approach. note scrupulous readers: estimands two approaches subtly different one another. LSDV approach estimates average block-level treatment effect. IPW approach estimates average individual-level treatment effect. can different. Since average block-level treatment effect people mind thinking causal effects, analysts using approach present . obtain_condition_probabilities() function used calculate probabilities assignment explained . create blocks? HairEyeColor dataset, make blocks unique combination hair color, eye color, sex. alternative use blockTools package, constructs matched pairs, trios, quartets, etc. pretreatment covariates. note blockTools users: package also assignment function. preference extract blocking variable, conduct assignment block_ra(), fewer steps required reconstruct random assignment generate new random assignments randomization inference procedure.","code":"Z <- block_ra(blocks = hec$Hair) table(Z, hec$Hair) Z <- block_ra(blocks = hec$Hair, num_arms = 3) table(Z, hec$Hair) Z <- block_ra(blocks = hec$Hair, conditions = c(\"Control\", \"Placebo\", \"Treatment\")) table(Z, hec$Hair) Z <- block_ra(blocks = hec$Hair, prob_each = c(.3, .7)) table(Z, hec$Hair) sort(unique(hec$Hair)) block_m_each <- rbind(c(78, 30),                       c(186, 100),                       c(51, 20),                       c(87,40))  block_m_each Z <- block_ra(blocks = hec$Hair, block_m_each = block_m_each) table(Z, hec$Hair) declaration <- declare_ra(blocks = hec$Hair, block_m_each = block_m_each)  # show the probability that each unit is assigned to each condition head(declaration$probabilities_matrix) # Show that the probability of treatment is different within block table(hec$Hair, round(declaration$probabilities_matrix[,2], 3)) hec <- within(hec,{   Z_blocked <- block_ra(blocks = hec$Hair,                         block_m_each = block_m_each)   Y_blocked <- Y1*(Z_blocked) + Y0*(1-Z_blocked)   cond_prob <- obtain_condition_probabilities(declaration, Z_blocked)   IPW_weights <- 1/(cond_prob) })  fit_LSDV <- lm(Y_blocked ~ Z_blocked + Hair, data=hec) fit_IPW <- lm(Y_blocked ~ Z_blocked, weights = IPW_weights, data = hec)  summary(fit_LSDV) summary(fit_IPW) blocks <- with(hec, paste(Hair, Eye, Sex, sep = \"_\")) Z <- block_ra(blocks = blocks) head(table(blocks, Z)) library(blockTools)  # BlockTools requires that all variables be numeric numeric_mat <- model.matrix(~Hair+Eye+Sex, data=hec)[,-1]  # BlockTools also requres an id variable df_forBT <- data.frame(id_var = 1:nrow(numeric_mat), numeric_mat)  # Conducting the actual blocking: let's make trios out <- block(df_forBT, n.tr = 3, id.vars = \"id_var\",               block.vars = colnames(df_forBT)[-1])  # Extact the block_ids hec$block_id <- createBlockIDs(out, df_forBT, id.var = \"id_var\")  # Conduct actual random assignment with randomizr Z_blocked <- block_ra(blocks = hec$block_id, num_arms = 3) head(table(hec$block_id, Z_blocked))"},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"clustered-assignment","dir":"Articles","previous_headings":"A hypothetical experiment","what":"Clustered assignment","title":"Design and Analysis of Experiments with randomizr","text":"Clustered assignment unfortunate. can avoid assigning subjects treatments cluster, . Sometimes, clustered assignment unavoidable. common situations include: Housemates households: whole households assigned treatment control Students classrooms: whole classrooms assigned treatment control Residents towns villages: whole communities assigned treatment control Clustered assignment decreases effective sample size experiment. extreme case outcomes perfectly correlated clusters, experiment effective sample size equal number clusters. outcomes perfectly uncorrelated clusters, effective sample size equal number subjects. Almost cluster-assigned experiments fall somewhere middle two extremes. required argument cluster_ra() function clusters argument, vector length N indicates cluster subject belongs . Let’s pretend reason, assign treatments according unique combinations hair color, eye color, gender. shows cluster either assigned treatment control. two units within cluster assigned different conditions. functions randomizr, can specify multiple treatment arms variety ways: … using conditions … using m_each, describes many clusters assigned condition. m_each must sum number clusters.","code":"clusters <- with(hec, paste(Hair, Eye, Sex, sep = \"_\")) hec$clusters <- clusters  Z_clust <- cluster_ra(clusters = clusters)  head(table(clusters, Z_clust)) Z_clust <- cluster_ra(clusters = clusters, num_arms = 3) head(table(clusters, Z_clust)) Z_clust <- cluster_ra(clusters=clusters,                        conditions=c(\"Control\", \"Placebo\", \"Treatment\")) head(table(clusters, Z_clust)) Z_clust <- cluster_ra(clusters=clusters, m_each=c(5, 15, 12)) head(table(clusters, Z_clust))"},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"blocked-and-clustered-assignment","dir":"Articles","previous_headings":"A hypothetical experiment","what":"Blocked and clustered assignment","title":"Design and Analysis of Experiments with randomizr","text":"power clustered experiments can sometimes improved blocking. scenario, whole clusters members particular block – imagine villages nested within discrete regions, classrooms nested within discrete schools. example, let’s group clusters blocks size using dplyr","code":"suppressMessages(library(dplyr)) cluster_level_df <-    hec %>%   group_by(clusters) %>%   summarize(cluster_size = n()) %>%   arrange(cluster_size) %>%   mutate(blocks = paste0(\"block_\", sprintf(\"%02d\",rep(1:16, each=2))))  hec <- left_join(hec, cluster_level_df)  # Extract the cluster and block variables clusters <- hec$clusters blocks <- hec$blocks  Z <- block_and_cluster_ra(clusters = clusters, blocks = blocks) head(table(clusters, Z)) head(table(blocks, Z))"},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"calculating-probabilities-of-assignment","dir":"Articles","previous_headings":"A hypothetical experiment","what":"Calculating probabilities of assignment","title":"Design and Analysis of Experiments with randomizr","text":"five random assignment functions randomizr assign units treatment known (sometimes complicated) probabilities. declare_ra() obtain_condition_probabilities() functions calculate probabilities according parameters experimental design. Let’s take look block random assignment used . order calculate probabilities assignment, call declare_ra() function exact arguments used block_ra() call. declaration object contains matrix probabilities assignment: prob_mat objects N rows many columns treatment conditions, case 2. order use inverse-probability weights, need know probability unit condition . unit, need pick appropriate probability. bookkeeping handled automatically obtain_condition_probabilities() function.","code":"block_m_each <-    rbind(c(78, 30),         c(186, 100),         c(51, 20),         c(87, 40))    Z <- block_ra(blocks = hec$Hair,               block_m_each = block_m_each)  table(hec$Hair, Z) declaration <- declare_ra(blocks = hec$Hair,                           block_m_each = block_m_each) prob_mat <- declaration$probabilities_matrix head(prob_mat) cond_prob <- obtain_condition_probabilities(declaration, Z) table(cond_prob, Z)"},{"path":[]},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"random-assignment-procedure-random-assignment-function","dir":"Articles","previous_headings":"Best practices","what":"Random assignment procedure = Random assignment function","title":"Design and Analysis of Experiments with randomizr","text":"Random assignment procedures often described series steps manually carried researcher. order make procedure reproducible, steps need translated function returns different random assignment time called. example, consider following procedure randomly allocating school vouchers. Every eligible student’s names put list name assigned random number Balls numbers associated students put urn. urn “shuffled” Students names drawn one one urn slots given . one sibling family wins, siblings automatically win . write procedure function, might look like : assignment procedure complicated sibling rule, two effects: first, students cluster-assigned family, second, probability assignment varies student student. Obviously, families two children lottery higher probability winning lottery effectively two “tickets.” may better ways running assignment procedure (example, cluster_ra()), purpose example show complicated real-world procedures can written simple function. function, random assignment procedure can reproduced exactly, complicated probabilities assignment can calculated, analysis greatly simplified.","code":"# 400 families have 1 child in the lottery, 100 families have 2 family_id <- c(sprintf(\"%03d\", 1:500), sprintf(\"%03d\", 1:100))  school_ra <- function(m){   N <- length(family_id)   random_number <- sample(1:N, replace=FALSE)   Z <- rep(0, N)   i <- 1   while(sum(Z) <m){     Z[family_id==family_id[random_number[i]]] <- 1     i <- i + 1   }   return(Z) }  Z <- school_ra(200) table(Z)"},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"check-probabilities-of-assignment-directly","dir":"Articles","previous_headings":"Best practices","what":"Check probabilities of assignment directly","title":"Design and Analysis of Experiments with randomizr","text":"many designs, probability assignment treatment can calculated analytically. example, completely randomized design 200 units, 60 assigned treatment, probability exactly 0.30 units. However, complicated designs (schools example described ), analytic probabilities difficult calculate. situation, easy way obtain probabilities assignment simulation. Call random assignment function approximately infinite number times (10,000 purposes). Count often unit assigned treatment arm.  plot shows students sibling lottery higher probability assignment. simulations, precise estimate probability assignment.","code":"Z_matrix <- replicate(1000, school_ra(200)) plot(rowMeans(Z_matrix))"},{"path":"https://declaredesign.org/r/randomizr/articles/randomizr_vignette.html","id":"save-your-random-assignment","dir":"Articles","previous_headings":"Best practices","what":"Save your random assignment","title":"Design and Analysis of Experiments with randomizr","text":"Whenever conduct random assignment use experiment, save ! minimum, random assignment saved id variable csv.","code":"hec <- within(hec,{   Z_blocked <- complete_ra(N = N, m_each = c(100, 200, 292),                conditions = c(\"control\", \"placebo\", \"treatment\"))   id_var <- 1:nrow(hec) }) write.csv(hec[,c(\"id_var\", \"Z_blocked\")], file = \"MyRandomAssignment.csv\")"},{"path":"https://declaredesign.org/r/randomizr/articles/srandomizr_vignette.html","id":"a-hypothetical-experiment","dir":"Articles","previous_headings":"","what":"A Hypothetical Experiment","title":"Design and Analysis of Experiments with randomizr (Stata)","text":"Throughout vignette, ’ll pretend ’re conducting experiment among 592 individuals R’s HairEyeColor dataset. ’ll see, many ways randomly assign subjects treatments. ’ll step five common designs, associated one five randomizr functions: simple_ra, complete_ra, block_ra, cluster_ra, block_and_cluster_ra. Typically, researchers know basic information subjects deploying treatment. example, usually know many subjects experimental sample (N), usually know basic demographic information subject. new dataset 592 subjects. three pretreatment covariates, Hair, Eye, Sex, describe hair color, eye color, gender subject. also potential outcomes. call untreated outcome Y0 call treated outcome Y1. Imagine absence intervention, outcome (Y0) correlated pretreatment covariates. Imagine effectiveness program varies according covariates, .e., difference Y1 Y0 correlated pretreatment covariates. really running experiment, observe either Y0 Y1 subject, since simulating, . inferential target average treatment effect (ATE), defined average difference Y0 Y1.","code":". clear all         . use HairEyeColor       (Written by R.              )        . des        Contains data from HairEyeColor.dta         obs:           592                          Written by R.                      vars:             6                          28 Aug 2017 01:24        size:        18,944                                 -----------------------------------------------------------------------------------                     storage   display    value       variable name   type    format     label      variable label       -----------------------------------------------------------------------------------       Hair            long    %9.0g      Hair       Hair       Eye             long    %9.0g      Eye        Eye       Sex             long    %9.0g      Sex        Sex       Y1              double  %9.0g                 Y1       Y0              double  %9.0g                 Y0       id              float   %9.0g                        -----------------------------------------------------------------------------------       Sorted by:         . list in 1/5             +---------------------------------------------------+            |  Hair     Eye    Sex          Y1          Y0   id |            |---------------------------------------------------|         1. | Black   Brown   Male   -2.983882   -14.98388    1 |         2. | Black   Brown   Male    6.616561   -5.383439    2 |         3. | Black   Brown   Male    4.711323   -7.288677    3 |         4. | Black   Brown   Male   -.2332402   -12.23324    4 |         5. | Black   Brown   Male    1.940893   -10.05911    5 |            +---------------------------------------------------+        . set seed 324437641"},{"path":"https://declaredesign.org/r/randomizr/articles/srandomizr_vignette.html","id":"simple-random-assignment","dir":"Articles","previous_headings":"","what":"Simple Random Assignment","title":"Design and Analysis of Experiments with randomizr (Stata)","text":"Simple random assignment assigns subjects treatment equal probability flipping (weighted) coin subject. main trouble simple random assignment number subjects assigned treatment random number - depending random assignment, different number subjects might assigned group. simple_ra function required arguments. arguments specified, simple_ra assumes two-group design 0.50 probability assignment. change probability assignment, specify prob argument: specify num_arms without changing prob_each, simple_ra assume equal probabilities across arms. can also just specify probabilities multiple arms. probabilities must sum 1. can also name treatment arms.","code":". simple_ra Z         . tab Z                  Z |      Freq.     Percent        Cum.       ------------+-----------------------------------                 0 |        294       49.66       49.66                 1 |        298       50.34      100.00       ------------+-----------------------------------             Total |        592      100.00 . simple_ra Z, replace prob(.3)         . tab Z                  Z |      Freq.     Percent        Cum.       ------------+-----------------------------------                 0 |        423       71.45       71.45                 1 |        169       28.55      100.00       ------------+-----------------------------------             Total |        592      100.00 . simple_ra Z, replace num_arms(3)         . tab Z                  Z |      Freq.     Percent        Cum.       ------------+-----------------------------------                 1 |        186       31.42       31.42                 2 |        193       32.60       64.02                 3 |        213       35.98      100.00       ------------+-----------------------------------             Total |        592      100.00 . simple_ra Z, replace prob_each(.2 .2 .6)         . tab Z                  Z |      Freq.     Percent        Cum.       ------------+-----------------------------------                 1 |        138       23.31       23.31                 2 |        110       18.58       41.89                 3 |        344       58.11      100.00       ------------+-----------------------------------             Total |        592      100.00 . simple_ra Z, replace prob_each(.2 .2 .6) conditions(control placebo treatment)         . tab Z                  Z |      Freq.     Percent        Cum.       ------------+-----------------------------------           control |        105       17.74       17.74           placebo |        119       20.10       37.84         treatment |        368       62.16      100.00       ------------+-----------------------------------             Total |        592      100.00"},{"path":"https://declaredesign.org/r/randomizr/articles/srandomizr_vignette.html","id":"complete-random-assignment","dir":"Articles","previous_headings":"","what":"Complete Random Assignment","title":"Design and Analysis of Experiments with randomizr (Stata)","text":"Complete random assignment similar simple random assignment, except researcher can specify exactly many units assigned condition. syntax complete_ra similar simple_ra. argument m number units assigned treatment two-arm designs; analogous simple_ra’s prob. Similarly, argument m_each analogous prob_each. specify arguments complete_ra, assigns exactly half subjects treatment. change number units assigned, specify m argument: specify multiple arms, complete_ra assign equal (within rounding) number units treatment. can also specify exactly many units assigned arm. total m_each must equal N. can also name treatment arms.","code":". complete_ra Z, replace        . tab Z                  Z |      Freq.     Percent        Cum.       ------------+-----------------------------------                 0 |        296       50.00       50.00                 1 |        296       50.00      100.00       ------------+-----------------------------------             Total |        592      100.00 . complete_ra Z, m(200) replace        . tab Z                  Z |      Freq.     Percent        Cum.       ------------+-----------------------------------                 0 |        392       66.22       66.22                 1 |        200       33.78      100.00       ------------+-----------------------------------             Total |        592      100.00 . complete_ra Z, num_arms(3) replace         . tab Z                  Z |      Freq.     Percent        Cum.       ------------+-----------------------------------                 1 |        197       33.28       33.28                 2 |        197       33.28       66.55                 3 |        198       33.45      100.00       ------------+-----------------------------------             Total |        592      100.00 . complete_ra Z, m_each(100 200 292) replace         . tab Z                  Z |      Freq.     Percent        Cum.       ------------+-----------------------------------                 1 |        100       16.89       16.89                 2 |        200       33.78       50.68                 3 |        292       49.32      100.00       ------------+-----------------------------------             Total |        592      100.00 . complete_ra Z, m_each(100 200 292) replace conditions(control placebo treatment)         . tab Z                  Z |      Freq.     Percent        Cum.       ------------+-----------------------------------           control |        100       16.89       16.89           placebo |        200       33.78       50.68         treatment |        292       49.32      100.00       ------------+-----------------------------------             Total |        592      100.00"},{"path":"https://declaredesign.org/r/randomizr/articles/srandomizr_vignette.html","id":"simple-and-complete-random-assignment-compared","dir":"Articles","previous_headings":"","what":"Simple and Complete Random Assignment Compared","title":"Design and Analysis of Experiments with randomizr (Stata)","text":"use simple_ra versus complete_ra? Basically, number units known beforehand, complete_ra always preferred, two reasons: 1. Researchers can plan exactly many treatments deployed. 2. standard errors associated complete random assignment generally smaller, increasing experimental power. See guide EGAP experimental power. Since need know N beforehand order use simple_ra, may seem like useless function. Sometimes, however, random assignment isn’t directly researcher’s control. example, deploying survey experiment platform like Qualtrics, simple random assignment possibility due inflexibility built-random assignment tools. reconstructing random assignment analysis experiment conducted, simple_ra provides convenient way . demonstrate complete_ra superior simple_ra, let’s conduct small simulation HairEyeColor dataset. standard error estimate defined standard deviation sampling distribution estimator. standard errors estimated (.e., using summary() command model fit), estimated using approximation. simulation allows us measure standard error directly, since vectors simple_ests complete_ests describe sampling distribution design. simulation complete random assignment led 6% decrease sampling variability. decrease obtained small design tweak costs researcher essentially nothing.","code":". local sims=1000        . matrix simple_ests=J(`sims',1,.)                . matrix complete_ests=J(`sims',1,.)        . forval i=1/`sims' {       . local seed=32430641+`i'       . set seed `seed'       . qui simple_ra Z_simple, replace       . qui complete_ra Z_complete, replace       . qui tempvar Y_simple Y_complete       . qui gen `Y_simple' = Y1*Z_simple + Y0*(1-Z_simple)       . qui gen `Y_complete' = Y1*Z_complete + Y0*(1-Z_complete)       . qui reg `Y_simple' Z_simple       . qui matrix simple_ests[`i',1]=_b[Z_simple]       . qui reg `Y_complete' Z_complete       . qui matrix complete_ests[`i',1]=_b[Z_complete]       . } . mata: st_numscalar(\"simple_var\",variance(st_matrix(\"simple_ests\")))         . mata: st_numscalar(\"complete_var\",variance(st_matrix(\"complete_ests\")))         . disp \"Simple RA S.D.: \" sqrt(simple_var)       Simple RA S.D.: .62489587        . disp \"Complete RA S.D.: \"sqrt(complete_var)       Complete RA S.D.: .60401434"},{"path":"https://declaredesign.org/r/randomizr/articles/srandomizr_vignette.html","id":"block-random-assignment","dir":"Articles","previous_headings":"","what":"Block Random Assignment","title":"Design and Analysis of Experiments with randomizr (Stata)","text":"Block random assignment (sometimes known stratified random assignment) powerful tool used well. design, subjects sorted blocks (strata) according pre-treatment covariates, complete random assignment conducted within block. example, researcher might block gender, assigning exactly half men exactly half women treatment. block? first reason signal future readers treatment effect heterogeneity may interest: treatment effect different men versus women? course, heterogeneity explored complete random assignment used, blocking covariate defends researcher (somewhat) claims data dredging. second reason increase precision. blocking variables predictive outcome (.e., correlated outcome), blocking may help decrease sampling variability. ’s important, however, overstate advantages. gains blocked design can often realized covariate adjustment alone. Blocking can also produce complications estimation. Blocking can produce different probabilities assignment different subjects. complication typically addressed one two ways: “controlling blocks” regression context, inverse probability weights (IPW), units weighted inverse probability unit condition . required argument block_ra block_var, variable describes block unit belongs . block_var can string numeric variable. arguments specified, block_ra assigns approximately equal proportion block treatment. multiple treatment arms, use num_arms argument, without conditions argument block_ra provides number ways adjust number subjects assigned conditions. prob_each argument describes proportion block assigned treatment arm. Note course, block_ra still uses complete random assignment within block; appropriate number units assign treatment within block automatically determined. finer control, use block_m_each argument, takes matrix many rows blocks, many columns treatment conditions. Remember rows order seen tab block_var, command good run constructing block_m_each matrix. matrix can either defined using matrix define command inputted directly block_m_each option.","code":". block_ra Z, block_var(Hair) replace        . tab Z Hair                   |                    Hair                Z |     Black      Brown        Red      Blond |     Total       -----------+--------------------------------------------+----------                0 |        54        143         35         64 |       296                 1 |        54        143         36         63 |       296        -----------+--------------------------------------------+----------            Total |       108        286         71        127 |       592 . block_ra Z, block_var(Hair) num_arms(3) replace        . tab Z Hair                   |                    Hair                Z |     Black      Brown        Red      Blond |     Total       -----------+--------------------------------------------+----------                1 |        36         95         24         43 |       198                 2 |        36         96         24         42 |       198                 3 |        36         95         23         42 |       196        -----------+--------------------------------------------+----------            Total |       108        286         71        127 |       592          . block_ra Z, block_var(Hair) conditions(Control Placebo Treatment) replace        . tab Z Hair                   |                    Hair                Z |     Black      Brown        Red      Blond |     Total       -----------+--------------------------------------------+----------          Control |        36         96         23         42 |       197           Placebo |        36         95         23         43 |       197         Treatment |        36         95         25         42 |       198        -----------+--------------------------------------------+----------            Total |       108        286         71        127 |       592 . block_ra Z, block_var(Hair) prob_each(.3 .7) replace        . tab Z Hair                   |                    Hair                Z |     Black      Brown        Red      Blond |     Total       -----------+--------------------------------------------+----------                0 |        75        201         49         88 |       413                 1 |        33         85         22         39 |       179        -----------+--------------------------------------------+----------            Total |       108        286         71        127 |       592 . tab Hair                Hair |      Freq.     Percent        Cum.       ------------+-----------------------------------             Black |        108       18.24       18.24             Brown |        286       48.31       66.55               Red |         71       11.99       78.55             Blond |        127       21.45      100.00       ------------+-----------------------------------             Total |        592      100.00        . matrix define block_m_each=(78, 30\\186, 100\\51, 20\\87,40)        . matrix list block_m_each        block_m_each[4,2]            c1   c2       r1   78   30       r2  186  100       r3   51   20       r4   87   40        . block_ra Z, replace block_var(Hair) block_m_each(block_m_each)         . tab Z Hair                    |                    Hair                Z |     Black      Brown        Red      Blond |     Total       -----------+--------------------------------------------+----------                0 |        30        100         20         40 |       190                 1 |        78        186         51         87 |       402        -----------+--------------------------------------------+----------            Total |       108        286         71        127 |       592          . block_ra Z, replace block_var(Hair) block_m_each(78, 30\\186, 100\\51, 20\\87,40)         . tab Z Hair                         |                    Hair                Z |     Black      Brown        Red      Blond |     Total       -----------+--------------------------------------------+----------                0 |        30        100         20         40 |       190                 1 |        78        186         51         87 |       402        -----------+--------------------------------------------+----------            Total |       108        286         71        127 |       592"},{"path":"https://declaredesign.org/r/randomizr/articles/srandomizr_vignette.html","id":"clustered-assignment","dir":"Articles","previous_headings":"","what":"Clustered Assignment","title":"Design and Analysis of Experiments with randomizr (Stata)","text":"Clustered assignment unfortunate. can avoid assigning subjects treatments cluster, . Sometimes, clustered assignment unavoidable. common situations include: Housemates households: whole households assigned treatment control Students classrooms: whole classrooms assigned treatment control Residents towns villages: whole communities assigned treatment control Clustered assignment decreases effective sample size experiment. extreme case outcomes perfectly correlated clusters, experiment effective sample size equal number clusters. outcomes perfectly uncorrelated clusters, effective sample size equal number subjects. Almost cluster-assigned experiments fall somewhere middle two extremes. required argument cluster_ra function clust_var argument, indicates cluster subject belongs . Let’s pretend reason, assign treatments according unique combinations hair color, eye color, gender. shows cluster either assigned treatment control. two units within cluster assigned different conditions. functions randomizr, can specify multiple treatment arms variety ways: …using conditions. … using m_each, describes many clusters assigned condition. m_each must sum number clusters.","code":". egen clust_var=group(Hair Eye Sex)        . tab clust_var         group(Hair |          Eye Sex) |      Freq.     Percent        Cum.       ------------+-----------------------------------                 1 |         32        5.41        5.41                 2 |         36        6.08       11.49                 3 |         11        1.86       13.34                 4 |          9        1.52       14.86                 5 |         10        1.69       16.55                 6 |          5        0.84       17.40                 7 |          3        0.51       17.91                 8 |          2        0.34       18.24                 9 |         53        8.95       27.20                10 |         66       11.15       38.34                11 |         50        8.45       46.79                12 |         34        5.74       52.53                13 |         25        4.22       56.76                14 |         29        4.90       61.66                15 |         15        2.53       64.19                16 |         14        2.36       66.55                17 |         10        1.69       68.24                18 |         16        2.70       70.95                19 |         10        1.69       72.64                20 |          7        1.18       73.82                21 |          7        1.18       75.00                22 |          7        1.18       76.18                23 |          7        1.18       77.36                24 |          7        1.18       78.55                25 |          3        0.51       79.05                26 |          4        0.68       79.73                27 |         30        5.07       84.80                28 |         64       10.81       95.61                29 |          5        0.84       96.45                30 |          5        0.84       97.30                31 |          8        1.35       98.65                32 |          8        1.35      100.00       ------------+-----------------------------------             Total |        592      100.00        . cluster_ra Z_clust, cluster_var(clust_var)         . tab clust_var Z_clust        group(Hair |        Z_clust         Eye Sex) |         0          1 |     Total       -----------+----------------------+----------                1 |        32          0 |        32                 2 |        36          0 |        36                 3 |        11          0 |        11                 4 |         9          0 |         9                 5 |         0         10 |        10                 6 |         5          0 |         5                 7 |         0          3 |         3                 8 |         2          0 |         2                 9 |        53          0 |        53                10 |         0         66 |        66                11 |        50          0 |        50                12 |         0         34 |        34                13 |         0         25 |        25                14 |         0         29 |        29                15 |         0         15 |        15                16 |        14          0 |        14                17 |         0         10 |        10                18 |         0         16 |        16                19 |         0         10 |        10                20 |         0          7 |         7                21 |         0          7 |         7                22 |         7          0 |         7                23 |         7          0 |         7                24 |         7          0 |         7                25 |         0          3 |         3                26 |         4          0 |         4                27 |        30          0 |        30                28 |        64          0 |        64                29 |         5          0 |         5                30 |         0          5 |         5                31 |         0          8 |         8                32 |         0          8 |         8        -----------+----------------------+----------            Total |       336        256 |       592 . cluster_ra Z_clust, cluster_var(clust_var) num_arms(3) replace         . tab clust_var Z_clust        group(Hair |             Z_clust         Eye Sex) |         1          2          3 |     Total       -----------+---------------------------------+----------                1 |        32          0          0 |        32                 2 |        36          0          0 |        36                 3 |         0          0         11 |        11                 4 |         9          0          0 |         9                 5 |        10          0          0 |        10                 6 |         0          0          5 |         5                 7 |         0          3          0 |         3                 8 |         0          0          2 |         2                 9 |         0         53          0 |        53                10 |        66          0          0 |        66                11 |         0         50          0 |        50                12 |         0         34          0 |        34                13 |         0          0         25 |        25                14 |         0          0         29 |        29                15 |         0         15          0 |        15                16 |        14          0          0 |        14                17 |         0          0         10 |        10                18 |         0          0         16 |        16                19 |         0         10          0 |        10                20 |         0          7          0 |         7                21 |         7          0          0 |         7                22 |         7          0          0 |         7                23 |         0          0          7 |         7                24 |         0          0          7 |         7                25 |         3          0          0 |         3                26 |         0          4          0 |         4                27 |         0         30          0 |        30                28 |        64          0          0 |        64                29 |         0          0          5 |         5                30 |         0          5          0 |         5                31 |         0          0          8 |         8                32 |         0          8          0 |         8        -----------+---------------------------------+----------            Total |       248        219        125 |       592 . cluster_ra Z_clust, cluster_var(clust_var) conditions(control placebo treatment)  replace         . tab clust_var Z_clust        group(Hair |             Z_clust         Eye Sex) |   control    placebo  treatment |     Total       -----------+---------------------------------+----------                1 |        32          0          0 |        32                 2 |         0          0         36 |        36                 3 |         0          0         11 |        11                 4 |         0          0          9 |         9                 5 |        10          0          0 |        10                 6 |         0          0          5 |         5                 7 |         3          0          0 |         3                 8 |         0          2          0 |         2                 9 |         0         53          0 |        53                10 |         0         66          0 |        66                11 |        50          0          0 |        50                12 |        34          0          0 |        34                13 |        25          0          0 |        25                14 |         0         29          0 |        29                15 |         0          0         15 |        15                16 |         0         14          0 |        14                17 |         0          0         10 |        10                18 |         0         16          0 |        16                19 |         0         10          0 |        10                20 |         7          0          0 |         7                21 |         0          7          0 |         7                22 |         0          7          0 |         7                23 |         7          0          0 |         7                24 |         0          0          7 |         7                25 |         3          0          0 |         3                26 |         0          0          4 |         4                27 |         0          0         30 |        30                28 |        64          0          0 |        64                29 |         5          0          0 |         5                30 |         0          5          0 |         5                31 |         0          0          8 |         8                32 |         0          8          0 |         8        -----------+---------------------------------+----------            Total |       240        217        135 |       592 . cluster_ra Z_clust, cluster_var(clust_var) m_each(5 15 12) replace         . tab clust_var Z_clust        group(Hair |             Z_clust         Eye Sex) |         1          2          3 |     Total       -----------+---------------------------------+----------                1 |         0         32          0 |        32                 2 |         0          0         36 |        36                 3 |         0          0         11 |        11                 4 |         0          0          9 |         9                 5 |         0         10          0 |        10                 6 |         5          0          0 |         5                 7 |         0          0          3 |         3                 8 |         0          2          0 |         2                 9 |         0         53          0 |        53                10 |         0         66          0 |        66                11 |         0          0         50 |        50                12 |         0          0         34 |        34                13 |         0          0         25 |        25                14 |         0          0         29 |        29                15 |         0         15          0 |        15                16 |         0          0         14 |        14                17 |         0          0         10 |        10                18 |         0          0         16 |        16                19 |         0         10          0 |        10                20 |         0          7          0 |         7                21 |         0          7          0 |         7                22 |         7          0          0 |         7                23 |         0          7          0 |         7                24 |         7          0          0 |         7                25 |         0          3          0 |         3                26 |         4          0          0 |         4                27 |         0         30          0 |        30                28 |         0          0         64 |        64                29 |         0          5          0 |         5                30 |         5          0          0 |         5                31 |         0          8          0 |         8                32 |         0          8          0 |         8        -----------+---------------------------------+----------            Total |        28        263        301 |       592"},{"path":"https://declaredesign.org/r/randomizr/articles/srandomizr_vignette.html","id":"block-and-clustered-assignment","dir":"Articles","previous_headings":"","what":"Block and Clustered Assignment","title":"Design and Analysis of Experiments with randomizr (Stata)","text":"power clustered experiments can sometimes improved blocking. scenario, whole clusters members particular block – imagine villages nested within discrete regions, classrooms nested within discrete schools. example, let’s group clusters blocks size","code":". bysort clust_var: egen cluster_size=count(_n)        . block_and_cluster_ra Z, block_var(cluster_size) cluster_var(clust_var) replace        . tab clust_var Z        group(Hair |           Z         Eye Sex) |         0          1 |     Total       -----------+----------------------+----------                1 |        32          0 |        32                 2 |         0         36 |        36                 3 |         0         11 |        11                 4 |         0          9 |         9                 5 |        10          0 |        10                 6 |         0          5 |         5                 7 |         0          3 |         3                 8 |         0          2 |         2                 9 |        53          0 |        53                10 |         0         66 |        66                11 |         0         50 |        50                12 |         0         34 |        34                13 |         0         25 |        25                14 |        29          0 |        29                15 |         0         15 |        15                16 |        14          0 |        14                17 |         0         10 |        10                18 |        16          0 |        16                19 |         0         10 |        10                20 |         7          0 |         7                21 |         0          7 |         7                22 |         7          0 |         7                23 |         0          7 |         7                24 |         7          0 |         7                25 |         3          0 |         3                26 |         4          0 |         4                27 |        30          0 |        30                28 |         0         64 |        64                29 |         0          5 |         5                30 |         5          0 |         5                31 |         0          8 |         8                32 |         8          0 |         8        -----------+----------------------+----------            Total |       225        367 |       592          . tab cluster_size Z         cluster_si |           Z               ze |         0          1 |     Total       -----------+----------------------+----------                2 |         0          2 |         2                 3 |         3          3 |         6                 4 |         4          0 |         4                 5 |         5         10 |        15                 7 |        21         14 |        35                 8 |         8          8 |        16                 9 |         0          9 |         9                10 |        10         20 |        30                11 |         0         11 |        11                14 |        14          0 |        14                15 |         0         15 |        15                16 |        16          0 |        16                25 |         0         25 |        25                29 |        29          0 |        29                30 |        30          0 |        30                32 |        32          0 |        32                34 |         0         34 |        34                36 |         0         36 |        36                50 |         0         50 |        50                53 |        53          0 |        53                64 |         0         64 |        64                66 |         0         66 |        66        -----------+----------------------+----------            Total |       225        367 |       592"},{"path":"https://declaredesign.org/r/randomizr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Coppock. Author, maintainer. Jasper Cooper. Contributor. Neal Fultz. Contributor.           C version restricted partitions Graeme Blair. Contributor.","code":""},{"path":"https://declaredesign.org/r/randomizr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coppock (2025). randomizr: Easy--Use Tools Common Forms Random Assignment Sampling. R package version 1.0.0, https://github.com/DeclareDesign/randomizr, https://declaredesign.org/r/randomizr/.","code":"@Manual{,   title = {randomizr: Easy-to-Use Tools for Common Forms of Random Assignment and Sampling},   author = {Alexander Coppock},   year = {2025},   note = {R package version 1.0.0, https://github.com/DeclareDesign/randomizr},   url = {https://declaredesign.org/r/randomizr/}, }"},{"path":"https://declaredesign.org/r/randomizr/index.html","id":"randomizr-tools-for-random-assignment-and-random-sampling","dir":"","previous_headings":"","what":"Easy-to-Use Tools for Common Forms of Random Assignment and Sampling","title":"Easy-to-Use Tools for Common Forms of Random Assignment and Sampling","text":"randomizr designed make conducting field, lab, survey, online experiments easier automating random assignment process. Social lab scientists conducting experiments need process assign individuals units observation treatment control wings. Common designs include simple random assignment, complete randomization, block randomization, cluster randomization, blocked cluster randomization. randomizr automates processes assists scientists transparent, replicable science. offer randomizr R Stata.","code":""},{"path":"https://declaredesign.org/r/randomizr/index.html","id":"installing-randomizr-for-r","dir":"","previous_headings":"","what":"Installing randomizr for R","title":"Easy-to-Use Tools for Common Forms of Random Assignment and Sampling","text":"Installing latest stable version randomizr R:.","code":"install.packages(\"randomizr\")"},{"path":"https://declaredesign.org/r/randomizr/index.html","id":"getting-started-with-randomizr-for-r","dir":"","previous_headings":"","what":"Getting started with randomizr for R","title":"Easy-to-Use Tools for Common Forms of Random Assignment and Sampling","text":"randomizr five main random assignment functions, corresponding common experimental designs listed . can read using functions reference library clicking function names: simple_ra(), complete_ra(), block_ra(), cluster_ra(), block_and_cluster_ra(). complete_ra() (Complete randomization) function appropriate large number experimental situations: want assign fixed m units population N units treatment: complicated design , example, assigns different numbers clusters three different treatments, makes use cluster_ra() (Cluster randomization): information randomizr’s functionality, please see online tutorial","code":"library(randomizr) Z <- complete_ra(N = 100, m = 50) table(Z) # This makes a cluster variable: one unit in cluster \"a\", two in \"b\"... clust_var <- rep(letters[1:15], times = 1:15)  Z <- cluster_ra(   clusters = clust_var,   m_each = c(4, 4, 7),   conditions = c(\"control\", \"placebo\", \"treatment\")   ) table(Z, clust_var)"},{"path":"https://declaredesign.org/r/randomizr/index.html","id":"randomizr-for-stata","dir":"","previous_headings":"","what":"randomizr for Stata","title":"Easy-to-Use Tools for Common Forms of Random Assignment and Sampling","text":"Installing latest stable version randomizr ssc easy: like install latest development release directly GitHub, run following code: Happy randomizing!","code":"ssc install randomizr net install randomizr, from(https://raw.githubusercontent.com/DeclareDesign/strandomizr/master/) replace"},{"path":"https://declaredesign.org/r/randomizr/reference/block_and_cluster_ra.html","id":null,"dir":"Reference","previous_headings":"","what":"Blocked and Clustered Random Assignment — block_and_cluster_ra","title":"Blocked and Clustered Random Assignment — block_and_cluster_ra","text":"random assignment procedure units assigned clusters clusters nested within blocks.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_and_cluster_ra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blocked and Clustered Random Assignment — block_and_cluster_ra","text":"","code":"block_and_cluster_ra(   blocks = NULL,   clusters = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   m = NULL,   m_unit = NULL,   block_m = NULL,   block_m_each = NULL,   block_prob = NULL,   block_prob_each = NULL,   num_arms = NULL,   conditions = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/block_and_cluster_ra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blocked and Clustered Random Assignment — block_and_cluster_ra","text":"blocks vector length N indicates block unit belongs . clusters vector length N indicates cluster unit belongs . prob Use two-arm design either floor(N_clusters_block*prob) ceiling(N_clusters_block*prob) clusters assigned treatment within block. probability assignment treatment exactly prob probability 1-prob, floor(N_clusters_block*prob) clusters assigned treatment probability prob, ceiling(N_clusters_block*prob) clusters assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two arm design. Must length N. tapply(prob_unit, blocks, unique) passed block_prob. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number clusters assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) m Use two-arm design scalar m describes fixed number clusters assigned block. number vary across blocks. m_unit Use two-arm design. Must length N. tapply(m_unit, blocks, unique) passed block_m. block_m Use two-arm design block_m describes number clusters assign treatment within block. block_m must numeric vector long number blocks order sort(unique(blocks)). block_m_each Use multi-arm design values block_m_each determine number clusters assigned condition. block_m_each must matrix number rows blocks number columns treatment arms. Cell entries number clusters assigned treatment arm within block. rows respect ordering blocks determined sort(unique(blocks)). columns order conditions, specified. block_prob Use two-arm design block_prob describes probability assignment treatment within block. Must order sort(unique(blocks)). Differs prob probability assignment can vary across blocks. block_prob_each Use multi-arm design values block_prob_each determine probabilities assignment treatment condition. block_prob_each must matrix number rows blocks number columns treatment arms. Cell entries probabilities assignment treatment within block. rows respect ordering blocks determined sort(unique(blocks)). Use probabilities assignment vary block, otherwise use prob_each. row block_prob_each must sum 1. num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_and_cluster_ra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blocked and Clustered Random Assignment — block_and_cluster_ra","text":"vector length N indicates treatment condition unit.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_and_cluster_ra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blocked and Clustered Random Assignment — block_and_cluster_ra","text":"","code":"clusters <- rep(letters, times=1:26)  blocks <- rep(NA, length(clusters)) blocks[clusters %in% letters[1:5]] <- \"block_1\" blocks[clusters %in% letters[6:10]] <- \"block_2\" blocks[clusters %in% letters[11:15]] <- \"block_3\" blocks[clusters %in% letters[16:20]] <- \"block_4\" blocks[clusters %in% letters[21:26]] <- \"block_5\"   table(blocks, clusters) #>          clusters #> blocks     a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w #>   block_1  1  2  3  4  5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>   block_2  0  0  0  0  0  6  7  8  9 10  0  0  0  0  0  0  0  0  0  0  0  0  0 #>   block_3  0  0  0  0  0  0  0  0  0  0 11 12 13 14 15  0  0  0  0  0  0  0  0 #>   block_4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 16 17 18 19 20  0  0  0 #>   block_5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 21 22 23 #>          clusters #> blocks     x  y  z #>   block_1  0  0  0 #>   block_2  0  0  0 #>   block_3  0  0  0 #>   block_4  0  0  0 #>   block_5 24 25 26  Z <- block_and_cluster_ra(blocks = blocks,                           clusters = clusters)  table(Z, blocks) #>    blocks #> Z   block_1 block_2 block_3 block_4 block_5 #>   0       7      15      26      56      72 #>   1       8      25      39      34      69 table(Z, clusters) #>    clusters #> Z    a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   0  0  0  3  4  0  0  7  8  0  0  0 12  0 14  0  0 17  0 19 20 21  0  0  0 25 #>   1  1  2  0  0  5  6  0  0  9 10 11  0 13  0 15 16  0 18  0  0  0 22 23 24  0 #>    clusters #> Z    z #>   0 26 #>   1  0  Z <- block_and_cluster_ra(blocks = blocks,                           clusters = clusters,                           num_arms = 3)  table(Z, blocks) #>     blocks #> Z    block_1 block_2 block_3 block_4 block_5 #>   T1       7      17      11      35      51 #>   T2       3       7      26      35      43 #>   T3       5      16      28      20      47 table(Z, clusters) #>     clusters #> Z     a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   T1  0  0  3  4  0  0  0  8  9  0 11  0  0  0  0  0 17 18  0  0  0  0  0  0 25 #>   T2  1  2  0  0  0  0  7  0  0  0  0 12  0 14  0 16  0  0 19  0 21 22  0  0  0 #>   T3  0  0  0  0  5  6  0  0  0 10  0  0 13  0 15  0  0  0  0 20  0  0 23 24  0 #>     clusters #> Z     z #>   T1 26 #>   T2  0 #>   T3  0  Z <- block_and_cluster_ra(blocks = blocks,                           clusters = clusters,                           prob_each = c(.2, .5, .3))  block_m_each <- rbind(c(2, 3),                       c(1, 4),                       c(3, 2),                       c(2, 3),                       c(5, 1))  Z <- block_and_cluster_ra(blocks = blocks,                           clusters = clusters,                           block_m_each = block_m_each)  table(Z, blocks) #>    blocks #> Z   block_1 block_2 block_3 block_4 block_5 #>   0       6       6      38      34     116 #>   1       9      34      27      56      25 table(Z, clusters) #>    clusters #> Z    a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   0  0  2  0  4  0  6  0  0  0  0 11 12  0  0 15 16  0 18  0  0 21 22 23 24  0 #>   1  1  0  3  0  5  0  7  8  9 10  0  0 13 14  0  0 17  0 19 20  0  0  0  0 25 #>    clusters #> Z    z #>   0 26 #>   1  0"},{"path":"https://declaredesign.org/r/randomizr/reference/block_and_cluster_ra_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"probabilities of assignment: Blocked and Clustered Random Assignment — block_and_cluster_ra_probabilities","title":"probabilities of assignment: Blocked and Clustered Random Assignment — block_and_cluster_ra_probabilities","text":"probabilities assignment: Blocked Clustered Random Assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_and_cluster_ra_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"probabilities of assignment: Blocked and Clustered Random Assignment — block_and_cluster_ra_probabilities","text":"","code":"block_and_cluster_ra_probabilities(   blocks = NULL,   clusters = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   m = NULL,   m_unit = NULL,   block_m = NULL,   block_m_each = NULL,   block_prob = NULL,   block_prob_each = NULL,   num_arms = NULL,   conditions = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/block_and_cluster_ra_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"probabilities of assignment: Blocked and Clustered Random Assignment — block_and_cluster_ra_probabilities","text":"blocks vector length N indicates block unit belongs . clusters vector length N indicates cluster unit belongs . prob Use two-arm design either floor(N_clusters_block*prob) ceiling(N_clusters_block*prob) clusters assigned treatment within block. probability assignment treatment exactly prob probability 1-prob, floor(N_clusters_block*prob) clusters assigned treatment probability prob, ceiling(N_clusters_block*prob) clusters assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two arm design. Must length N. tapply(prob_unit, blocks, unique) passed block_prob. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number clusters assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) m Use two-arm design scalar m describes fixed number clusters assigned block. number vary across blocks. m_unit Use two-arm design. Must length N. tapply(m_unit, blocks, unique) passed block_m. block_m Use two-arm design block_m describes number clusters assign treatment within block. block_m must numeric vector long number blocks order sort(unique(blocks)). block_m_each Use multi-arm design values block_m_each determine number clusters assigned condition. block_m_each must matrix number rows blocks number columns treatment arms. Cell entries number clusters assigned treatment arm within block. rows respect ordering blocks determined sort(unique(blocks)). columns order conditions, specified. block_prob Use two-arm design block_prob describes probability assignment treatment within block. Must order sort(unique(blocks)). Differs prob probability assignment can vary across blocks. block_prob_each Use multi-arm design values block_prob_each determine probabilities assignment treatment condition. block_prob_each must matrix number rows blocks number columns treatment arms. Cell entries probabilities assignment treatment within block. rows respect ordering blocks determined sort(unique(blocks)). Use probabilities assignment vary block, otherwise use prob_each. row block_prob_each must sum 1. num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_and_cluster_ra_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"probabilities of assignment: Blocked and Clustered Random Assignment — block_and_cluster_ra_probabilities","text":"matrix probabilities assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_and_cluster_ra_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"probabilities of assignment: Blocked and Clustered Random Assignment — block_and_cluster_ra_probabilities","text":"","code":"clusters <- rep(letters, times=1:26) blocks <- rep(NA, length(clusters)) blocks[clusters %in% letters[1:5]] <- \"block_1\" blocks[clusters %in% letters[6:10]] <- \"block_2\" blocks[clusters %in% letters[11:15]] <- \"block_3\" blocks[clusters %in% letters[16:20]] <- \"block_4\" blocks[clusters %in% letters[21:26]] <- \"block_5\"   prob_mat <- block_and_cluster_ra_probabilities(clusters = clusters,                                                blocks = blocks) head(prob_mat) #>      prob_0 prob_1 #> [1,]    0.5    0.5 #> [2,]    0.5    0.5 #> [3,]    0.5    0.5 #> [4,]    0.5    0.5 #> [5,]    0.5    0.5 #> [6,]    0.5    0.5                                      prob_mat <- block_and_cluster_ra_probabilities(clusters = clusters,                                                blocks = blocks,                                                num_arms = 3) head(prob_mat) #>        prob_T1   prob_T2   prob_T3 #> [1,] 0.3333333 0.3333333 0.3333333 #> [2,] 0.3333333 0.3333333 0.3333333 #> [3,] 0.3333333 0.3333333 0.3333333 #> [4,] 0.3333333 0.3333333 0.3333333 #> [5,] 0.3333333 0.3333333 0.3333333 #> [6,] 0.3333333 0.3333333 0.3333333                                      prob_mat <- block_and_cluster_ra_probabilities(clusters = clusters,                                                blocks = blocks,                                                prob_each = c(.2, .5, .3)) head(prob_mat)                                     #>      prob_T1 prob_T2 prob_T3 #> [1,]     0.2     0.5     0.3 #> [2,]     0.2     0.5     0.3 #> [3,]     0.2     0.5     0.3 #> [4,]     0.2     0.5     0.3 #> [5,]     0.2     0.5     0.3 #> [6,]     0.2     0.5     0.3  block_m_each <- rbind(c(2, 3),                       c(1, 4),                       c(3, 2),                       c(2, 3),                       c(5, 1))  prob_mat <- block_and_cluster_ra_probabilities(clusters = clusters,                                                 blocks = blocks,                                                 block_m_each = block_m_each) head(prob_mat)                                     #>      prob_0 prob_1 #> [1,]    0.4    0.6 #> [2,]    0.4    0.6 #> [3,]    0.4    0.6 #> [4,]    0.4    0.6 #> [5,]    0.4    0.6 #> [6,]    0.4    0.6"},{"path":"https://declaredesign.org/r/randomizr/reference/block_ra.html","id":null,"dir":"Reference","previous_headings":"","what":"Block Random Assignment — block_ra","title":"Block Random Assignment — block_ra","text":"block_ra implements random assignment procedure units grouped blocks defined pre-treatment covariates assigned using complete random assignment within block. example, imagine 50 100 men assigned treatment 75 200 women assigned treatment.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_ra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block Random Assignment — block_ra","text":"","code":"block_ra(   blocks = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   m = NULL,   m_unit = NULL,   block_m = NULL,   block_m_each = NULL,   block_prob = NULL,   block_prob_each = NULL,   num_arms = NULL,   conditions = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/block_ra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block Random Assignment — block_ra","text":"blocks vector length N indicates block unit belongs . Can character, factor, numeric vector. (required) prob Use two-arm design either floor(N_block*prob) ceiling(N_block*prob) units assigned treatment within block. probability assignment treatment exactly prob probability 1-prob, floor(N_block*prob) units assigned treatment probability prob, ceiling(N_block*prob) units assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two arm design. Must length N. tapply(prob_unit, blocks, unique) passed block_prob. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number units assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) m Use two-arm design scalar m describes fixed number units assign block. number vary across blocks. m_unit Use two-arm design. Must length N. tapply(m_unit, blocks, unique) passed block_m. block_m Use two-arm design vector block_m describes number units assign treatment within block. block_m must numeric vector long number blocks order sort(unique(blocks)). block_m_each Use multi-arm design values block_m_each determine number units assigned condition. block_m_each must matrix number rows blocks number columns treatment arms. Cell entries number units assigned treatment arm within block. rows respect ordering blocks determined sort(unique(blocks)). columns order conditions, specified. block_prob Use two-arm design block_prob describes probability assignment treatment within block. Must order sort(unique(blocks)). Differs prob probability assignment can vary across blocks. block_prob_each Use multi-arm design values block_prob_each determine probabilities assignment treatment condition. block_prob_each must matrix number rows blocks number columns treatment arms. Cell entries probabilities assignment treatment within block. rows respect ordering blocks determined sort(unique(blocks)). Use probabilities assignment vary block, otherwise use prob_each. row block_prob_each must sum 1. num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_ra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block Random Assignment — block_ra","text":"vector length N indicates treatment condition unit. numeric two-arm trial factor variable (ordered conditions) multi-arm trial.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_ra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block Random Assignment — block_ra","text":"","code":"# Two-arm Designs  blocks <- rep(c(\"A\", \"B\",\"C\"), times = c(50, 100, 200)) Z <- block_ra(blocks = blocks) table(blocks, Z) #>       Z #> blocks   0   1 #>      A  25  25 #>      B  50  50 #>      C 100 100  Z <- block_ra(blocks = blocks, prob = .3) table(blocks, Z) #>       Z #> blocks   0   1 #>      A  35  15 #>      B  70  30 #>      C 140  60  Z <- block_ra(blocks = blocks, block_prob = c(.1, .2, .3)) table(blocks, Z) #>       Z #> blocks   0   1 #>      A  45   5 #>      B  80  20 #>      C 140  60  Z <- block_ra(blocks = blocks,                prob_unit = rep(c(.1, .2, .3),                                times = c(50, 100, 200))) table(blocks, Z) #>       Z #> blocks   0   1 #>      A  45   5 #>      B  80  20 #>      C 140  60  Z <- block_ra(blocks = blocks, m = 20) table(blocks, Z) #>       Z #> blocks   0   1 #>      A  30  20 #>      B  80  20 #>      C 180  20  Z <- block_ra(blocks = blocks, block_m = c(20, 30, 40)) table(blocks, Z) #>       Z #> blocks   0   1 #>      A  30  20 #>      B  70  30 #>      C 160  40  Z <- block_ra(blocks = blocks,                m_unit = rep(c(20, 30, 40),                            times = c(50, 100, 200))) table(blocks, Z) #>       Z #> blocks   0   1 #>      A  30  20 #>      B  70  30 #>      C 160  40  block_m_each <- rbind(c(25, 25),                  c(50, 50),                  c(100, 100))  Z <- block_ra(blocks = blocks, block_m_each = block_m_each) table(blocks, Z) #>       Z #> blocks   0   1 #>      A  25  25 #>      B  50  50 #>      C 100 100  block_m_each <- rbind(c(10, 40),                  c(30, 70),                  c(50, 150))  Z <- block_ra(blocks = blocks, block_m_each = block_m_each,               conditions = c(\"control\", \"treatment\")) table(blocks, Z) #>       Z #> blocks control treatment #>      A      10        40 #>      B      30        70 #>      C      50       150  # Multi-arm Designs Z <- block_ra(blocks = blocks, num_arms = 3) table(blocks, Z) #>       Z #> blocks T1 T2 T3 #>      A 17 16 17 #>      B 34 33 33 #>      C 67 66 67  block_m_each <- rbind(c(10, 20, 20),                  c(30, 50, 20),                  c(50, 75, 75)) Z <- block_ra(blocks = blocks, block_m_each = block_m_each) table(blocks, Z) #>       Z #> blocks T1 T2 T3 #>      A 10 20 20 #>      B 30 50 20 #>      C 50 75 75  Z <- block_ra(blocks = blocks, block_m_each = block_m_each,               conditions = c(\"control\", \"placebo\", \"treatment\")) table(blocks, Z) #>       Z #> blocks control placebo treatment #>      A      10      20        20 #>      B      30      50        20 #>      C      50      75        75  Z <- block_ra(blocks = blocks, prob_each = c(.1, .1, .8)) table(blocks, Z) #>       Z #> blocks  T1  T2  T3 #>      A   5   5  40 #>      B  10  10  80 #>      C  20  20 160"},{"path":"https://declaredesign.org/r/randomizr/reference/block_ra_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"probabilities of assignment: Block Random Assignment — block_ra_probabilities","title":"probabilities of assignment: Block Random Assignment — block_ra_probabilities","text":"probabilities assignment: Block Random Assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_ra_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"probabilities of assignment: Block Random Assignment — block_ra_probabilities","text":"","code":"block_ra_probabilities(   blocks = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   m = NULL,   m_unit = NULL,   block_m = NULL,   block_m_each = NULL,   block_prob = NULL,   block_prob_each = NULL,   num_arms = NULL,   conditions = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/block_ra_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"probabilities of assignment: Block Random Assignment — block_ra_probabilities","text":"blocks vector length N indicates block unit belongs . Can character, factor, numeric vector. (required) prob Use two-arm design either floor(N_block*prob) ceiling(N_block*prob) units assigned treatment within block. probability assignment treatment exactly prob probability 1-prob, floor(N_block*prob) units assigned treatment probability prob, ceiling(N_block*prob) units assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two arm design. Must length N. tapply(prob_unit, blocks, unique) passed block_prob. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number units assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) m Use two-arm design scalar m describes fixed number units assign block. number vary across blocks. m_unit Use two-arm design. Must length N. tapply(m_unit, blocks, unique) passed block_m. block_m Use two-arm design vector block_m describes number units assign treatment within block. block_m must numeric vector long number blocks order sort(unique(blocks)). block_m_each Use multi-arm design values block_m_each determine number units assigned condition. block_m_each must matrix number rows blocks number columns treatment arms. Cell entries number units assigned treatment arm within block. rows respect ordering blocks determined sort(unique(blocks)). columns order conditions, specified. block_prob Use two-arm design block_prob describes probability assignment treatment within block. Must order sort(unique(blocks)). Differs prob probability assignment can vary across blocks. block_prob_each Use multi-arm design values block_prob_each determine probabilities assignment treatment condition. block_prob_each must matrix number rows blocks number columns treatment arms. Cell entries probabilities assignment treatment within block. rows respect ordering blocks determined sort(unique(blocks)). Use probabilities assignment vary block, otherwise use prob_each. row block_prob_each must sum 1. num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_ra_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"probabilities of assignment: Block Random Assignment — block_ra_probabilities","text":"matrix probabilities assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/block_ra_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"probabilities of assignment: Block Random Assignment — block_ra_probabilities","text":"","code":"blocks <- rep(c(\"A\", \"B\",\"C\"), times = c(50, 100, 200)) prob_mat <- block_ra_probabilities(blocks = blocks) head(prob_mat) #>      prob_0 prob_1 #> [1,]    0.5    0.5 #> [2,]    0.5    0.5 #> [3,]    0.5    0.5 #> [4,]    0.5    0.5 #> [5,]    0.5    0.5 #> [6,]    0.5    0.5  prob_mat <- block_ra_probabilities(blocks = blocks, m = 20) head(prob_mat) #>      prob_0 prob_1 #> [1,]    0.6    0.4 #> [2,]    0.6    0.4 #> [3,]    0.6    0.4 #> [4,]    0.6    0.4 #> [5,]    0.6    0.4 #> [6,]    0.6    0.4  block_m_each <- rbind(c(25, 25),                  c(50, 50),                  c(100, 100))  prob_mat <- block_ra_probabilities(blocks = blocks, block_m_each = block_m_each) head(prob_mat) #>      prob_0 prob_1 #> [1,]    0.5    0.5 #> [2,]    0.5    0.5 #> [3,]    0.5    0.5 #> [4,]    0.5    0.5 #> [5,]    0.5    0.5 #> [6,]    0.5    0.5  block_m_each <- rbind(c(10, 40),                  c(30, 70),                  c(50, 150))  prob_mat <- block_ra_probabilities(blocks = blocks,                                    block_m_each = block_m_each,                                    conditions = c(\"control\", \"treatment\")) head(prob_mat) #>      prob_control prob_treatment #> [1,]          0.2            0.8 #> [2,]          0.2            0.8 #> [3,]          0.2            0.8 #> [4,]          0.2            0.8 #> [5,]          0.2            0.8 #> [6,]          0.2            0.8  prob_mat <- block_ra_probabilities(blocks = blocks, num_arms = 3) head(prob_mat) #>        prob_T1   prob_T2   prob_T3 #> [1,] 0.3333333 0.3333333 0.3333333 #> [2,] 0.3333333 0.3333333 0.3333333 #> [3,] 0.3333333 0.3333333 0.3333333 #> [4,] 0.3333333 0.3333333 0.3333333 #> [5,] 0.3333333 0.3333333 0.3333333 #> [6,] 0.3333333 0.3333333 0.3333333  block_m_each <- rbind(c(10, 20, 20),                  c(30, 50, 20),                  c(50, 75, 75)) prob_mat <- block_ra_probabilities(blocks = blocks, block_m_each = block_m_each) head(prob_mat) #>      prob_T1 prob_T2 prob_T3 #> [1,]     0.2     0.4     0.4 #> [2,]     0.2     0.4     0.4 #> [3,]     0.2     0.4     0.4 #> [4,]     0.2     0.4     0.4 #> [5,]     0.2     0.4     0.4 #> [6,]     0.2     0.4     0.4  prob_mat <- block_ra_probabilities(blocks=blocks, block_m_each=block_m_each,                        conditions=c(\"control\", \"placebo\", \"treatment\")) head(prob_mat) #>      prob_control prob_placebo prob_treatment #> [1,]          0.2          0.4            0.4 #> [2,]          0.2          0.4            0.4 #> [3,]          0.2          0.4            0.4 #> [4,]          0.2          0.4            0.4 #> [5,]          0.2          0.4            0.4 #> [6,]          0.2          0.4            0.4  prob_mat <- block_ra_probabilities(blocks=blocks, prob_each=c(.1, .1, .8)) head(prob_mat) #>      prob_T1 prob_T2 prob_T3 #> [1,]     0.1     0.1     0.8 #> [2,]     0.1     0.1     0.8 #> [3,]     0.1     0.1     0.8 #> [4,]     0.1     0.1     0.8 #> [5,]     0.1     0.1     0.8 #> [6,]     0.1     0.1     0.8"},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_ra.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster Random Assignment — cluster_ra","title":"Cluster Random Assignment — cluster_ra","text":"cluster_ra implements random assignment procedure groups units assigned together (cluster) treatment conditions. function conducts complete random assignment cluster level, unless simple = TRUE, case simple_ra analogues used.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_ra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster Random Assignment — cluster_ra","text":"","code":"cluster_ra(   clusters = NULL,   m = NULL,   m_unit = NULL,   m_each = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   num_arms = NULL,   conditions = NULL,   simple = FALSE,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_ra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster Random Assignment — cluster_ra","text":"clusters vector length N indicates cluster unit belongs . m Use two-arm design m clusters assigned treatment N_clusters-m clusters assigned control. (optional) m_unit Use two-arm design exactly unique(m_unit) clusters assigned treatment remainder assigned control. m_unit must length N must units (optional) m_each Use multi-arm design values m_each determine number clusters assigned condition. m_each must numeric vector entry nonnegative integer describes many clusters assigned 1st, 2nd, 3rd... treatment condition. m_each must sum N. (optional) prob Use two-arm design either floor(N_clusters*prob) ceiling(N_clusters*prob) clusters assigned treatment. probability assignment treatment exactly prob probability 1-prob, floor(N_clusters*prob) clusters assigned treatment probability prob, ceiling(N_clusters*prob) clusters assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two-arm design. unique(prob_unit) passed prob argument must units. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number clusters assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) num_arms total number treatment arms. unspecified, determined length m_each conditions. conditions character vector giving names treatment groups. unspecified, treatment groups named T1, T2, T3, etc. simple logical, defaults FALSE. TRUE, simple random assignment clusters conditions used. simple = TRUE, please specify m m_each. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_ra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster Random Assignment — cluster_ra","text":"vector length N indicates treatment condition unit.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_ra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster Random Assignment — cluster_ra","text":"","code":"# Two Group Designs clusters <- rep(letters, times=1:26)  Z <- cluster_ra(clusters = clusters) table(Z, clusters) #>    clusters #> Z    a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   0  0  2  3  4  5  0  7  0  0 10  0 12  0 14 15  0 17 18  0  0 21 22  0  0  0 #>   1  1  0  0  0  0  6  0  8  9  0 11  0 13  0  0 16  0  0 19 20  0  0 23 24 25 #>    clusters #> Z    z #>   0  0 #>   1 26  Z <- cluster_ra(clusters = clusters, m = 13) table(Z, clusters) #>    clusters #> Z    a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   0  1  2  0  4  0  0  0  8  9 10  0 12  0  0  0  0  0 18 19 20  0  0 23  0 25 #>   1  0  0  3  0  5  6  7  0  0  0 11  0 13 14 15 16 17  0  0  0 21 22  0 24  0 #>    clusters #> Z    z #>   0 26 #>   1  0  Z <- cluster_ra(clusters = clusters, m_each = c(10, 16),                 conditions = c(\"control\", \"treatment\")) table(Z, clusters) #>            clusters #> Z            a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v #>   control    0  0  0  4  5  0  0  0  9  0  0  0  0  0  0 16  0 18 19  0 21 22 #>   treatment  1  2  3  0  0  6  7  8  0 10 11 12 13 14 15  0 17  0  0 20  0  0 #>            clusters #> Z            w  x  y  z #>   control    0 24 25  0 #>   treatment 23  0  0 26  # Multi-arm Designs Z <- cluster_ra(clusters = clusters, num_arms = 3) table(Z, clusters) #>     clusters #> Z     a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   T1  1  0  0  0  5  0  0  0  0  0  0 12  0  0 15  0 17  0 19 20 21  0 23  0  0 #>   T2  0  2  3  0  0  0  0  0  9  0  0  0  0 14  0 16  0 18  0  0  0 22  0 24  0 #>   T3  0  0  0  4  0  6  7  8  0 10 11  0 13  0  0  0  0  0  0  0  0  0  0  0 25 #>     clusters #> Z     z #>   T1  0 #>   T2 26 #>   T3  0  Z <- cluster_ra(clusters = clusters, m_each = c(7, 7, 12)) table(Z, clusters) #>     clusters #> Z     a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   T1  0  0  3  0  5  0  0  0  0  0  0  0 13  0 15  0  0  0 19  0  0  0 23 24  0 #>   T2  0  2  0  4  0  0  0  8  0  0  0 12  0  0  0  0  0  0  0  0 21  0  0  0 25 #>   T3  1  0  0  0  0  6  7  0  9 10 11  0  0 14  0 16 17 18  0 20  0 22  0  0  0 #>     clusters #> Z     z #>   T1  0 #>   T2 26 #>   T3  0  Z <- cluster_ra(clusters = clusters, m_each = c(7, 7, 12),                 conditions = c(\"control\", \"placebo\", \"treatment\")) table(Z, clusters) #>            clusters #> Z            a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v #>   control    0  0  0  4  0  6  0  8  0  0 11  0 13  0  0  0  0  0  0  0  0 22 #>   placebo    0  0  0  0  0  0  7  0  9  0  0  0  0  0 15  0  0  0  0 20  0  0 #>   treatment  1  2  3  0  5  0  0  0  0 10  0 12  0 14  0 16 17 18 19  0 21  0 #>            clusters #> Z            w  x  y  z #>   control   23  0  0  0 #>   placebo    0 24 25 26 #>   treatment  0  0  0  0  Z <- cluster_ra(clusters = clusters,                 conditions = c(\"control\", \"placebo\", \"treatment\")) table(Z, clusters) #>            clusters #> Z            a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v #>   control    0  0  0  0  0  6  7  8  9  0  0  0  0 14  0  0  0  0  0 20  0 22 #>   placebo    1  2  3  4  0  0  0  0  0  0 11  0 13  0  0  0  0  0  0  0  0  0 #>   treatment  0  0  0  0  5  0  0  0  0 10  0 12  0  0 15 16 17 18 19  0 21  0 #>            clusters #> Z            w  x  y  z #>   control    0  0 25 26 #>   placebo   23 24  0  0 #>   treatment  0  0  0  0"},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_ra_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"probabilities of assignment: Cluster Random Assignment — cluster_ra_probabilities","title":"probabilities of assignment: Cluster Random Assignment — cluster_ra_probabilities","text":"probabilities assignment: Cluster Random Assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_ra_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"probabilities of assignment: Cluster Random Assignment — cluster_ra_probabilities","text":"","code":"cluster_ra_probabilities(   clusters = NULL,   m = NULL,   m_unit = NULL,   m_each = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   num_arms = NULL,   conditions = NULL,   simple = FALSE,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_ra_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"probabilities of assignment: Cluster Random Assignment — cluster_ra_probabilities","text":"clusters vector length N indicates cluster unit belongs . m Use two-arm design m clusters assigned treatment N_clusters-m clusters assigned control. (optional) m_unit Use two-arm design exactly unique(m_unit) clusters assigned treatment remainder assigned control. m_unit must length N must units (optional) m_each Use multi-arm design values m_each determine number clusters assigned condition. m_each must numeric vector entry nonnegative integer describes many clusters assigned 1st, 2nd, 3rd... treatment condition. m_each must sum N. (optional) prob Use two-arm design either floor(N_clusters*prob) ceiling(N_clusters*prob) clusters assigned treatment. probability assignment treatment exactly prob probability 1-prob, floor(N_clusters*prob) clusters assigned treatment probability prob, ceiling(N_clusters*prob) clusters assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two-arm design. unique(prob_unit) passed prob argument must units. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number clusters assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) num_arms total number treatment arms. unspecified, determined length m_each conditions. conditions character vector giving names treatment groups. unspecified, treatment groups named T1, T2, T3, etc. simple logical, defaults FALSE. TRUE, simple random assignment clusters conditions used. simple = TRUE, please specify m m_each. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_ra_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"probabilities of assignment: Cluster Random Assignment — cluster_ra_probabilities","text":"matrix probabilities assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_ra_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"probabilities of assignment: Cluster Random Assignment — cluster_ra_probabilities","text":"","code":"# Two Group Designs clusters <- rep(letters, times = 1:26) prob_mat <- cluster_ra_probabilities(clusters = clusters) head(prob_mat) #>      prob_0 prob_1 #> [1,]    0.5    0.5 #> [2,]    0.5    0.5 #> [3,]    0.5    0.5 #> [4,]    0.5    0.5 #> [5,]    0.5    0.5 #> [6,]    0.5    0.5  prob_mat <- cluster_ra_probabilities(clusters = clusters, m = 10) head(prob_mat) #>         prob_0    prob_1 #> [1,] 0.6153846 0.3846154 #> [2,] 0.6153846 0.3846154 #> [3,] 0.6153846 0.3846154 #> [4,] 0.6153846 0.3846154 #> [5,] 0.6153846 0.3846154 #> [6,] 0.6153846 0.3846154  prob_mat <- cluster_ra_probabilities(clusters = clusters,                                      m_each = c(9, 17),                                      conditions = c(\"control\", \"treatment\"))  # Multi-arm Designs prob_mat <- cluster_ra_probabilities(clusters = clusters, num_arms = 3) head(prob_mat) #>        prob_T1   prob_T2   prob_T3 #> [1,] 0.3333333 0.3333333 0.3333333 #> [2,] 0.3333333 0.3333333 0.3333333 #> [3,] 0.3333333 0.3333333 0.3333333 #> [4,] 0.3333333 0.3333333 0.3333333 #> [5,] 0.3333333 0.3333333 0.3333333 #> [6,] 0.3333333 0.3333333 0.3333333  prob_mat <- cluster_ra_probabilities(clusters = clusters, m_each = c(7, 7, 12)) head(prob_mat) #>        prob_T1   prob_T2   prob_T3 #> [1,] 0.2692308 0.2692308 0.4615385 #> [2,] 0.2692308 0.2692308 0.4615385 #> [3,] 0.2692308 0.2692308 0.4615385 #> [4,] 0.2692308 0.2692308 0.4615385 #> [5,] 0.2692308 0.2692308 0.4615385 #> [6,] 0.2692308 0.2692308 0.4615385  prob_mat <- cluster_ra_probabilities(clusters = clusters, m_each = c(7, 7, 12),                          conditions=c(\"control\", \"placebo\", \"treatment\")) head(prob_mat) #>      prob_control prob_placebo prob_treatment #> [1,]    0.2692308    0.2692308      0.4615385 #> [2,]    0.2692308    0.2692308      0.4615385 #> [3,]    0.2692308    0.2692308      0.4615385 #> [4,]    0.2692308    0.2692308      0.4615385 #> [5,]    0.2692308    0.2692308      0.4615385 #> [6,]    0.2692308    0.2692308      0.4615385  prob_mat <- cluster_ra_probabilities(clusters = clusters,                          conditions=c(\"control\", \"placebo\", \"treatment\")) head(prob_mat) #>      prob_control prob_placebo prob_treatment #> [1,]    0.3333333    0.3333333      0.3333333 #> [2,]    0.3333333    0.3333333      0.3333333 #> [3,]    0.3333333    0.3333333      0.3333333 #> [4,]    0.3333333    0.3333333      0.3333333 #> [5,]    0.3333333    0.3333333      0.3333333 #> [6,]    0.3333333    0.3333333      0.3333333  prob_mat <- cluster_ra_probabilities(clusters = clusters,                                      prob_each = c(.1, .2, .7)) head(prob_mat) #>      prob_T1 prob_T2 prob_T3 #> [1,]     0.1     0.2     0.7 #> [2,]     0.1     0.2     0.7 #> [3,]     0.1     0.2     0.7 #> [4,]     0.1     0.2     0.7 #> [5,]     0.1     0.2     0.7 #> [6,]     0.1     0.2     0.7"},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster Random Sampling — cluster_rs","title":"Cluster Random Sampling — cluster_rs","text":"cluster_rs implements random sampling procedure groups units sampled together (cluster). function conducts complete random sampling cluster level, unless simple = TRUE, case simple_rs analogues used.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster Random Sampling — cluster_rs","text":"","code":"cluster_rs(   clusters = NULL,   n = NULL,   n_unit = NULL,   prob = NULL,   prob_unit = NULL,   simple = FALSE,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster Random Sampling — cluster_rs","text":"clusters vector length N indicates cluster unit belongs . n Use design n clusters sampled. (optional) n_unit unique(n_unit) passed n. Must units (optional) prob Use design either floor(N_clusters*prob) ceiling(N_clusters*prob) clusters sampled. probability sampled exactly prob probability 1-prob, floor(N_clusters*prob) clusters sampled probability prob, ceiling(N_clusters*prob) clusters sampled. prob must real number 0 1 inclusive. (optional) prob_unit unique(prob_unit) passed prob argument must units. simple logical, defaults FALSE. TRUE, simple random sampling clusters. simple = TRUE, please specify n. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster Random Sampling — cluster_rs","text":"numeric vector length N indicates unit sampled (1) (0).","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster Random Sampling — cluster_rs","text":"","code":"clusters <- rep(letters, times=1:26)  S <- cluster_rs(clusters = clusters) table(S, clusters) #>    clusters #> S    a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   0  0  0  3  4  0  6  7  0  9  0 11 12  0  0 15  0  0 18 19 20  0  0  0  0 25 #>   1  1  2  0  0  5  0  0  8  0 10  0  0 13 14  0 16 17  0  0  0 21 22 23 24  0 #>    clusters #> S    z #>   0 26 #>   1  0  S <- cluster_rs(clusters = clusters, n = 13) table(S, clusters) #>    clusters #> S    a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   0  1  0  3  4  5  0  7  8  9  0  0 12  0 14  0 16  0 18  0  0 21  0 23  0  0 #>   1  0  2  0  0  0  6  0  0  0 10 11  0 13  0 15  0 17  0 19 20  0 22  0 24 25 #>    clusters #> S    z #>   0  0 #>   1 26"},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_rs_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Inclusion Probabilities: Cluster Sampling — cluster_rs_probabilities","title":"Inclusion Probabilities: Cluster Sampling — cluster_rs_probabilities","text":"Inclusion Probabilities: Cluster Sampling","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_rs_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inclusion Probabilities: Cluster Sampling — cluster_rs_probabilities","text":"","code":"cluster_rs_probabilities(   clusters = NULL,   n = NULL,   n_unit = NULL,   prob = NULL,   prob_unit = NULL,   simple = FALSE,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_rs_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inclusion Probabilities: Cluster Sampling — cluster_rs_probabilities","text":"clusters vector length N indicates cluster unit belongs . n Use design n clusters sampled. (optional) n_unit unique(n_unit) passed n. Must units (optional) prob Use design either floor(N_clusters*prob) ceiling(N_clusters*prob) clusters sampled. probability sampled exactly prob probability 1-prob, floor(N_clusters*prob) clusters sampled probability prob, ceiling(N_clusters*prob) clusters sampled. prob must real number 0 1 inclusive. (optional) prob_unit unique(prob_unit) passed prob argument must units. simple logical, defaults FALSE. TRUE, simple random sampling clusters. simple = TRUE, please specify n. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_rs_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inclusion Probabilities: Cluster Sampling — cluster_rs_probabilities","text":"vector length N indicating probability sampled.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/cluster_rs_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inclusion Probabilities: Cluster Sampling — cluster_rs_probabilities","text":"","code":"# Two Group Designs clusters <- rep(letters, times = 1:26) probs <- cluster_rs_probabilities(clusters = clusters) table(probs, clusters) #>      clusters #> probs  a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x #>   0.5  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #>      clusters #> probs  y  z #>   0.5 25 26  prob_mat <- cluster_rs_probabilities(clusters = clusters, n = 10) table(probs, clusters) #>      clusters #> probs  a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x #>   0.5  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #>      clusters #> probs  y  z #>   0.5 25 26  prob_mat <- cluster_rs_probabilities(clusters = clusters, prob = .3) table(probs, clusters) #>      clusters #> probs  a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x #>   0.5  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #>      clusters #> probs  y  z #>   0.5 25 26"},{"path":"https://declaredesign.org/r/randomizr/reference/complete_ra.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete Random Assignment — complete_ra","title":"Complete Random Assignment — complete_ra","text":"complete_ra implements random assignment procedure fixed numbers units assigned treatment conditions. canonical example complete random assignment procedure exactly m N units assigned treatment N-m units assigned control. Users can set exact number units assign condition m m_each. Alternatively, users can specify probabilities assignment prob prob_each complete_ra infer correct number units assign condition. two-arm design, complete_ra either assign floor(N*prob) ceiling(N*prob) units treatment, choosing two values ensure overall probability assignment exactly prob. multi-arm design, complete_ra first assign floor(N*prob_each) units respective conditions, assign remaining units using simple random assignment, choosing second-stage probabilities overall probabilities assignment exactly prob_each. cases, users specify N one m, m_each, prob, prob_each, num_arms.  N specified, two-arm trial N/2 units assigned treatment assumed. N odd, either floor(N/2) units ceiling(N/2) units assigned treatment.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_ra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete Random Assignment — complete_ra","text":"","code":"complete_ra(   N,   m = NULL,   m_unit = NULL,   m_each = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   num_arms = NULL,   conditions = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/complete_ra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete Random Assignment — complete_ra","text":"N number units. N must positive integer. (required) m Use two-arm design m units assigned treatment N-m units assigned control. (optional) m_unit Use two-arm design exactly unique(m_unit) units assigned treatment remainder assigned control. m_unit must length N must units (optional) m_each Use multi-arm design values m_each determine number units assigned condition. m_each must numeric vector entry nonnegative integer describes many units assigned 1st, 2nd, 3rd... treatment condition. m_each must sum N. (optional) prob Use two-arm design either floor(N*prob) ceiling(N*prob) units assigned treatment. probability assignment treatment exactly prob probability 1-prob, floor(N*prob) units assigned treatment probability prob, ceiling(N*prob) units assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two-arm design. unique(prob_unit) passed prob argument must units. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number units assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_ra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complete Random Assignment — complete_ra","text":"vector length N indicates treatment condition unit. numeric two-arm trial factor variable (ordered conditions) multi-arm trial.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_ra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete Random Assignment — complete_ra","text":"","code":"# Two-arm Designs Z <- complete_ra(N = 100) table(Z) #> Z #>  0  1  #> 50 50   Z <- complete_ra(N = 100, m = 50) table(Z) #> Z #>  0  1  #> 50 50   Z <- complete_ra(N = 100, m_unit = rep(50, 100)) table(Z) #> Z #>  0  1  #> 50 50   Z <- complete_ra(N = 100, prob = .111) table(Z) #> Z #>  0  1  #> 89 11   Z <- complete_ra(N = 100, prob_unit = rep(0.1, 100)) table(Z) #> Z #>  0  1  #> 90 10   Z <- complete_ra(N = 100, conditions = c(\"control\", \"treatment\")) table(Z) #> Z #>   control treatment  #>        50        50    # Multi-arm Designs Z <- complete_ra(N = 100, num_arms = 3) table(Z) #> Z #> T1 T2 T3  #> 34 33 33   Z <- complete_ra(N = 100, m_each = c(30, 30, 40)) table(Z) #> Z #> T1 T2 T3  #> 30 30 40   Z <- complete_ra(N = 100, prob_each = c(.1, .2, .7)) table(Z) #> Z #> T1 T2 T3  #> 10 20 70   Z <- complete_ra(N = 100, conditions = c(\"control\", \"placebo\", \"treatment\")) table(Z) #> Z #>   control   placebo treatment  #>        33        34        33   # Special Cases # Two-arm trial where the conditions are by default \"T1\" and \"T2\" Z <- complete_ra(N = 100, num_arms = 2) table(Z) #> Z #> T1 T2  #> 50 50   # If N = m, assign with 100% probability complete_ra(N=2, m=2) #> [1] 1 1  # Up through randomizr 0.12.0,  complete_ra(N=1, m=1) # assigned with 50% probability #> [1] 1 # This behavior has been deprecated"},{"path":"https://declaredesign.org/r/randomizr/reference/complete_ra_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"probabilities of assignment: Complete Random Assignment — complete_ra_probabilities","title":"probabilities of assignment: Complete Random Assignment — complete_ra_probabilities","text":"probabilities assignment: Complete Random Assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_ra_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"probabilities of assignment: Complete Random Assignment — complete_ra_probabilities","text":"","code":"complete_ra_probabilities(   N,   m = NULL,   m_unit = NULL,   m_each = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   num_arms = NULL,   conditions = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/complete_ra_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"probabilities of assignment: Complete Random Assignment — complete_ra_probabilities","text":"N number units. N must positive integer. (required) m Use two-arm design m units assigned treatment N-m units assigned control. (optional) m_unit Use two-arm design exactly unique(m_unit) units assigned treatment remainder assigned control. m_unit must length N must units (optional) m_each Use multi-arm design values m_each determine number units assigned condition. m_each must numeric vector entry nonnegative integer describes many units assigned 1st, 2nd, 3rd... treatment condition. m_each must sum N. (optional) prob Use two-arm design either floor(N*prob) ceiling(N*prob) units assigned treatment. probability assignment treatment exactly prob probability 1-prob, floor(N*prob) units assigned treatment probability prob, ceiling(N*prob) units assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two-arm design. unique(prob_unit) passed prob argument must units. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number units assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_ra_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"probabilities of assignment: Complete Random Assignment — complete_ra_probabilities","text":"matrix probabilities assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_ra_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"probabilities of assignment: Complete Random Assignment — complete_ra_probabilities","text":"","code":"# 2-arm designs prob_mat <- complete_ra_probabilities(N=100) head(prob_mat) #>      prob_0 prob_1 #> [1,]    0.5    0.5 #> [2,]    0.5    0.5 #> [3,]    0.5    0.5 #> [4,]    0.5    0.5 #> [5,]    0.5    0.5 #> [6,]    0.5    0.5  prob_mat <- complete_ra_probabilities(N=100, m=50) head(prob_mat) #>      prob_0 prob_1 #> [1,]    0.5    0.5 #> [2,]    0.5    0.5 #> [3,]    0.5    0.5 #> [4,]    0.5    0.5 #> [5,]    0.5    0.5 #> [6,]    0.5    0.5  prob_mat <- complete_ra_probabilities(N=100, prob = .3) head(prob_mat) #>      prob_0 prob_1 #> [1,]    0.7    0.3 #> [2,]    0.7    0.3 #> [3,]    0.7    0.3 #> [4,]    0.7    0.3 #> [5,]    0.7    0.3 #> [6,]    0.7    0.3  prob_mat <- complete_ra_probabilities(N=100, m_each = c(30, 70),                           conditions = c(\"control\", \"treatment\")) head(prob_mat) #>      prob_control prob_treatment #> [1,]          0.3            0.7 #> [2,]          0.3            0.7 #> [3,]          0.3            0.7 #> [4,]          0.3            0.7 #> [5,]          0.3            0.7 #> [6,]          0.3            0.7  # Multi-arm Designs prob_mat <- complete_ra_probabilities(N=100, num_arms=3) head(prob_mat) #>        prob_T1   prob_T2   prob_T3 #> [1,] 0.3333333 0.3333333 0.3333333 #> [2,] 0.3333333 0.3333333 0.3333333 #> [3,] 0.3333333 0.3333333 0.3333333 #> [4,] 0.3333333 0.3333333 0.3333333 #> [5,] 0.3333333 0.3333333 0.3333333 #> [6,] 0.3333333 0.3333333 0.3333333  prob_mat <- complete_ra_probabilities(N=100, m_each=c(30, 30, 40)) head(prob_mat) #>      prob_T1 prob_T2 prob_T3 #> [1,]     0.3     0.3     0.4 #> [2,]     0.3     0.3     0.4 #> [3,]     0.3     0.3     0.4 #> [4,]     0.3     0.3     0.4 #> [5,]     0.3     0.3     0.4 #> [6,]     0.3     0.3     0.4  prob_mat <- complete_ra_probabilities(N=100, m_each=c(30, 30, 40),                           conditions=c(\"control\", \"placebo\", \"treatment\")) head(prob_mat) #>      prob_control prob_placebo prob_treatment #> [1,]          0.3          0.3            0.4 #> [2,]          0.3          0.3            0.4 #> [3,]          0.3          0.3            0.4 #> [4,]          0.3          0.3            0.4 #> [5,]          0.3          0.3            0.4 #> [6,]          0.3          0.3            0.4  prob_mat <- complete_ra_probabilities(N=100, conditions=c(\"control\", \"placebo\", \"treatment\")) head(prob_mat) #>      prob_control prob_placebo prob_treatment #> [1,]    0.3333333    0.3333333      0.3333333 #> [2,]    0.3333333    0.3333333      0.3333333 #> [3,]    0.3333333    0.3333333      0.3333333 #> [4,]    0.3333333    0.3333333      0.3333333 #> [5,]    0.3333333    0.3333333      0.3333333 #> [6,]    0.3333333    0.3333333      0.3333333  prob_mat <- complete_ra_probabilities(N=100, prob_each = c(.2, .7, .1)) head(prob_mat) #>      prob_T1 prob_T2 prob_T3 #> [1,]     0.2     0.7     0.1 #> [2,]     0.2     0.7     0.1 #> [3,]     0.2     0.7     0.1 #> [4,]     0.2     0.7     0.1 #> [5,]     0.2     0.7     0.1 #> [6,]     0.2     0.7     0.1"},{"path":"https://declaredesign.org/r/randomizr/reference/complete_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete Random Sampling — complete_rs","title":"Complete Random Sampling — complete_rs","text":"complete_rs implements random sampling procedure fixed numbers units sampled. canonical example complete random sampling procedure exactly n N units sampled. Users can set exact number units sample n. Alternatively, users can specify probability sampled prob complete_rs infer correct number units sample. complete_rs either sample floor(N*prob) ceiling(N*prob) units, choosing two values ensure overall probability sampled exactly prob. Users specify N one n prob.  N specified, N/2 units sampled. N odd, either floor(N/2) units ceiling(N/2) units sampled.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete Random Sampling — complete_rs","text":"","code":"complete_rs(   N,   n = NULL,   n_unit = NULL,   prob = NULL,   prob_unit = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/complete_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete Random Sampling — complete_rs","text":"N number units. N must positive integer. (required) n Use design exactly n units sampled. (optional) n_unit unique(n_unit) passed n. Must units (optional) prob Use design either floor(N*prob) ceiling(N*prob) units sampled. probability sampled exactly prob probability 1-prob, floor(N*prob) units sampled probability prob, ceiling(N*prob) units sampled. prob must real number 0 1 inclusive. (optional) prob_unit unique(prob_unit) passed prob argument must units. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complete Random Sampling — complete_rs","text":"numeric vector length N indicates unit sampled (1) (0).","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete Random Sampling — complete_rs","text":"","code":"S <- complete_rs(N = 100) table(S) #> S #>  0  1  #> 50 50   S <- complete_rs(N = 100, n = 50) table(S) #> S #>  0  1  #> 50 50   S <- complete_rs(N = 100, n_unit = rep(50, 100)) table(S) #> S #>  0  1  #> 50 50   S <- complete_rs(N = 100, prob = .111) table(S) #> S #>  0  1  #> 89 11   S <- complete_rs(N = 100, prob_unit = rep(.1, 100)) table(S) #> S #>  0  1  #> 90 10   # If N = n, sample with 100% probability... complete_rs(N=2, n=2) #> [1] 1 1  # Up through randomizr 0.12.0,  # This behavior has been deprecated complete_rs(N=1, n=1) # sampled with 50% probability #> [1] 1"},{"path":"https://declaredesign.org/r/randomizr/reference/complete_rs_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Inclusion Probabilities: Complete Random Sampling — complete_rs_probabilities","title":"Inclusion Probabilities: Complete Random Sampling — complete_rs_probabilities","text":"Inclusion Probabilities: Complete Random Sampling","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_rs_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inclusion Probabilities: Complete Random Sampling — complete_rs_probabilities","text":"","code":"complete_rs_probabilities(   N,   n = NULL,   n_unit = NULL,   prob = NULL,   prob_unit = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/complete_rs_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inclusion Probabilities: Complete Random Sampling — complete_rs_probabilities","text":"N number units. N must positive integer. (required) n Use design exactly n units sampled. (optional) n_unit unique(n_unit) passed n. Must units (optional) prob Use design either floor(N*prob) ceiling(N*prob) units sampled. probability sampled exactly prob probability 1-prob, floor(N*prob) units sampled probability prob, ceiling(N*prob) units sampled. prob must real number 0 1 inclusive. (optional) prob_unit unique(prob_unit) passed prob argument must units. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_rs_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inclusion Probabilities: Complete Random Sampling — complete_rs_probabilities","text":"vector length N indicating probability sampled.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/complete_rs_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inclusion Probabilities: Complete Random Sampling — complete_rs_probabilities","text":"","code":"probs <- complete_rs_probabilities(N = 100) table(probs) #> probs #> 0.5  #> 100   probs <- complete_rs_probabilities(N = 100, n = 50) table(probs) #> probs #> 0.5  #> 100   probs <- complete_rs_probabilities(N=100, prob = .3) table(probs) #> probs #> 0.3  #> 100"},{"path":"https://declaredesign.org/r/randomizr/reference/conduct_ra.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct a random assignment — conduct_ra","title":"Conduct a random assignment — conduct_ra","text":"can either give conduct_ra() declaration, created declare_ra can specify arguments describe random assignment procedure.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/conduct_ra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct a random assignment — conduct_ra","text":"","code":"conduct_ra(   declaration = NULL,   N = NULL,   blocks = NULL,   clusters = NULL,   m = NULL,   m_unit = NULL,   m_each = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   block_m = NULL,   block_m_each = NULL,   block_prob = NULL,   block_prob_each = NULL,   num_arms = NULL,   conditions = NULL,   simple = FALSE,   permutation_matrix = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/conduct_ra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct a random assignment — conduct_ra","text":"declaration random assignment declaration, created declare_ra. N number units. N must positive integer. (required) blocks vector length N indicates block unit belongs . clusters vector length N indicates cluster unit belongs . m Use two-arm design m units (clusters) assigned treatment N-m units (clusters) assigned control. blocked design, exactly m units block treated. (optional) m_unit Use two-arm trial. complete random assignment, must constant across units. blocked random assignment, must constant within blocks. m_each Use multi-arm design values m_each determine number units (clusters) assigned condition. m_each must numeric vector entry nonnegative integer describes many units (clusters) assigned 1st, 2nd, 3rd... treatment condition. m_each must sum N. (optional) prob Use two-arm design either floor(N*prob) ceiling(N*prob) units (clusters) assigned treatment. probability assignment treatment exactly prob probability 1-prob, floor(N*prob) units (clusters) assigned treatment probability prob, ceiling(N*prob) units (clusters) assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two arm design. Must length N. simple random assignment, can different unit cluster.  complete random assignment, must constant across units. blocked random assignment, must constant within blocks. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number units assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) block_m Use two-arm design block_m describes number units assign treatment within block. Note previous versions randomizr, block_m behaved like block_m_each. block_m_each Use multi-arm design values block_m_each determine number units (clusters) assigned condition. block_m_each must matrix number rows blocks number columns treatment arms. Cell entries number units (clusters) assigned treatment arm within block. rows respect ordering blocks determined sort(unique(blocks)). columns order conditions, specified. block_prob Use two-arm design block_prob describes probability assignment treatment within block. Differs prob probability assignment can vary across blocks. block_prob_each Use multi-arm design values block_prob_each determine probabilities assignment treatment condition. block_prob_each must matrix number rows blocks number columns treatment arms. Cell entries probabilities assignment treatment within block. rows respect ordering blocks determined sort(unique(blocks)). Use probabilities assignment vary block, otherwise use prob_each. row block_prob_each must sum 1. num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) simple logical, defaults FALSE. TRUE, simple random assignment used. simple = TRUE, please specify m, m_each, block_m, block_m_each. simple = TRUE, prob prob_each may vary unit. permutation_matrix custom random assignment procedures. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/conduct_ra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conduct a random assignment — conduct_ra","text":"","code":"declaration <- declare_ra(N = 100, m_each = c(30, 30, 40)) Z <- conduct_ra(declaration = declaration) table(Z) #> Z #> T1 T2 T3  #> 30 30 40   # equivalent to  Z <- conduct_ra(N = 100, m_each = c(30, 30, 40)) table(Z) #> Z #> T1 T2 T3  #> 30 30 40"},{"path":"https://declaredesign.org/r/randomizr/reference/custom_ra.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Random Assignment — custom_ra","title":"Custom Random Assignment — custom_ra","text":"TODO","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/custom_ra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Random Assignment — custom_ra","text":"","code":"custom_ra(permutation_matrix)"},{"path":"https://declaredesign.org/r/randomizr/reference/custom_ra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Random Assignment — custom_ra","text":"permutation_matrix permutation matrix","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/custom_ra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom Random Assignment — custom_ra","text":"vector length N indicates treatment condition unit. numeric two-arm trial factor variable (ordered conditions) multi-arm trial.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/custom_ra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Random Assignment — custom_ra","text":"","code":"# TODO"},{"path":"https://declaredesign.org/r/randomizr/reference/custom_ra_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"probabilities of assignment: Custom Random Assignment — custom_ra_probabilities","title":"probabilities of assignment: Custom Random Assignment — custom_ra_probabilities","text":"probabilities assignment: Custom Random Assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/custom_ra_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"probabilities of assignment: Custom Random Assignment — custom_ra_probabilities","text":"","code":"custom_ra_probabilities(permutation_matrix)"},{"path":"https://declaredesign.org/r/randomizr/reference/custom_ra_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"probabilities of assignment: Custom Random Assignment — custom_ra_probabilities","text":"permutation_matrix permutation matrix","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/custom_ra_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"probabilities of assignment: Custom Random Assignment — custom_ra_probabilities","text":"matrix probabilities assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/custom_ra_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"probabilities of assignment: Custom Random Assignment — custom_ra_probabilities","text":"","code":"# TODO"},{"path":"https://declaredesign.org/r/randomizr/reference/declare_ra.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare a random assignment procedure. — declare_ra","title":"Declare a random assignment procedure. — declare_ra","text":"Declare random assignment procedure.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/declare_ra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare a random assignment procedure. — declare_ra","text":"","code":"declare_ra(   N = NULL,   blocks = NULL,   clusters = NULL,   m = NULL,   m_unit = NULL,   m_each = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   block_m = NULL,   block_m_each = NULL,   block_prob = NULL,   block_prob_each = NULL,   num_arms = NULL,   conditions = NULL,   simple = FALSE,   permutation_matrix = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/declare_ra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare a random assignment procedure. — declare_ra","text":"N number units. N must positive integer. (required) blocks vector length N indicates block unit belongs . clusters vector length N indicates cluster unit belongs . m Use two-arm design m units (clusters) assigned treatment N-m units (clusters) assigned control. blocked design, exactly m units block treated. (optional) m_unit Use two-arm trial. complete random assignment, must constant across units. blocked random assignment, must constant within blocks. m_each Use multi-arm design values m_each determine number units (clusters) assigned condition. m_each must numeric vector entry nonnegative integer describes many units (clusters) assigned 1st, 2nd, 3rd... treatment condition. m_each must sum N. (optional) prob Use two-arm design either floor(N*prob) ceiling(N*prob) units (clusters) assigned treatment. probability assignment treatment exactly prob probability 1-prob, floor(N*prob) units (clusters) assigned treatment probability prob, ceiling(N*prob) units (clusters) assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two arm design. Must length N. simple random assignment, can different unit cluster.  complete random assignment, must constant across units. blocked random assignment, must constant within blocks. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number units assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) block_m Use two-arm design block_m describes number units assign treatment within block. Note previous versions randomizr, block_m behaved like block_m_each. block_m_each Use multi-arm design values block_m_each determine number units (clusters) assigned condition. block_m_each must matrix number rows blocks number columns treatment arms. Cell entries number units (clusters) assigned treatment arm within block. rows respect ordering blocks determined sort(unique(blocks)). columns order conditions, specified. block_prob Use two-arm design block_prob describes probability assignment treatment within block. Differs prob probability assignment can vary across blocks. block_prob_each Use multi-arm design values block_prob_each determine probabilities assignment treatment condition. block_prob_each must matrix number rows blocks number columns treatment arms. Cell entries probabilities assignment treatment within block. rows respect ordering blocks determined sort(unique(blocks)). Use probabilities assignment vary block, otherwise use prob_each. row block_prob_each must sum 1. num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) simple logical, defaults FALSE. TRUE, simple random assignment used. simple = TRUE, please specify m, m_each, block_m, block_m_each. simple = TRUE, prob prob_each may vary unit. permutation_matrix custom random assignment procedures. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/declare_ra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare a random assignment procedure. — declare_ra","text":"list class \"declaration\".  list five entries:   $ra_function, function generates random assignments according declaration.   $ra_type, string indicating type random assignment used   $probabilities_matrix, matrix N rows num_arms columns, describing unit's probabilities assignment conditions.   $blocks, blocking variable.   $clusters, clustering variable.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/declare_ra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare a random assignment procedure. — declare_ra","text":"","code":"# The declare_ra function is used in three ways:  # 1. To obtain some basic facts about a randomization: declaration <- declare_ra(N=100, m_each=c(30, 30, 40)) declaration #> Random assignment procedure: Complete random assignment  #> Number of units: 100  #> Number of treatment arms: 3  #> The possible treatment categories are T1 and T2 and T3. #> The number of possible random assignments is approximately infinite.  #> The probabilities of assignment are constant across units:  #> prob_T1 prob_T2 prob_T3  #>     0.3     0.3     0.4   # 2. To conduct a random assignment:  Z <- conduct_ra(declaration) table(Z) #> Z #> T1 T2 T3  #> 30 30 40   # 3. To obtain observed condition probabilities  probs <- obtain_condition_probabilities(declaration, Z) table(probs, Z) #>      Z #> probs T1 T2 T3 #>   0.3 30 30  0 #>   0.4  0  0 40  # Simple Random Assignment Declarations  declare_ra(N=100, simple = TRUE) #> Random assignment procedure: Simple random assignment  #> Number of units: 100  #> Number of treatment arms: 2  #> The possible treatment categories are 0 and 1. #> The number of possible random assignments is 1.26765060022823e+30.   #> The probabilities of assignment are constant across units:  #> prob_0 prob_1  #>    0.5    0.5  declare_ra(N=100, prob = .4, simple = TRUE) #> Random assignment procedure: Simple random assignment  #> Number of units: 100  #> Number of treatment arms: 2  #> The possible treatment categories are 0 and 1. #> The number of possible random assignments is 1.26765060022823e+30.   #> The probabilities of assignment are constant across units:  #> prob_0 prob_1  #>    0.6    0.4  declare_ra(N=100, prob_each=c(0.3, 0.3, 0.4),            conditions=c(\"control\", \"placebo\", \"treatment\"), simple=TRUE) #> Random assignment procedure: Simple random assignment  #> Number of units: 100  #> Number of treatment arms: 3  #> The possible treatment categories are control and placebo and treatment. #> The number of possible random assignments is 5.15377520732011e+47.   #> The probabilities of assignment are constant across units:  #>   prob_control   prob_placebo prob_treatment  #>            0.3            0.3            0.4   # Complete Random Assignment Declarations  declare_ra(N=100) #> Random assignment procedure: Complete random assignment  #> Number of units: 100  #> Number of treatment arms: 2  #> The possible treatment categories are 0 and 1. #> The number of possible random assignments is approximately infinite.  #> The probabilities of assignment are constant across units:  #> prob_0 prob_1  #>    0.5    0.5  declare_ra(N=100, m_each = c(30, 70),            conditions = c(\"control\", \"treatment\")) #> Random assignment procedure: Complete random assignment  #> Number of units: 100  #> Number of treatment arms: 2  #> The possible treatment categories are control and treatment. #> The number of possible random assignments is approximately infinite.  #> The probabilities of assignment are constant across units:  #>   prob_control prob_treatment  #>            0.3            0.7  declare_ra(N=100, m_each=c(30, 30, 40)) #> Random assignment procedure: Complete random assignment  #> Number of units: 100  #> Number of treatment arms: 3  #> The possible treatment categories are T1 and T2 and T3. #> The number of possible random assignments is approximately infinite.  #> The probabilities of assignment are constant across units:  #> prob_T1 prob_T2 prob_T3  #>     0.3     0.3     0.4    # Block Random Assignment Declarations  blocks <- rep(c(\"A\", \"B\",\"C\"), times = c(50, 100, 200))  block_m_each <- rbind(c(10, 40),                  c(30, 70),                  c(50, 150)) declare_ra(blocks = blocks, block_m_each = block_m_each) #> Random assignment procedure: Block random assignment  #> Number of units: 350  #> Number of blocks: 3 #> Number of treatment arms: 2  #> The possible treatment categories are 0 and 1. #> The number of possible random assignments is approximately infinite.  #> The probabilities of assignment are NOT constant across units. Your analysis strategy must account for differential probabilities of assignment, typically by employing inverse probability weights.   # Cluster Random Assignment Declarations  clusters <- rep(letters, times = 1:26) declare_ra(clusters = clusters) #> Random assignment procedure: Cluster random assignment  #> Number of units: 351  #> Number of clusters: 26 #> Number of treatment arms: 2  #> The possible treatment categories are 0 and 1. #> The number of possible random assignments is 10400600.   #> The probabilities of assignment are constant across units:  #> prob_0 prob_1  #>    0.5    0.5  declare_ra(clusters = clusters, m_each = c(7, 7, 12)) #> Random assignment procedure: Cluster random assignment  #> Number of units: 351  #> Number of clusters: 26 #> Number of treatment arms: 3  #> The possible treatment categories are T1 and T2 and T3. #> The number of possible random assignments is 33145226400.   #> The probabilities of assignment are constant across units:  #>   prob_T1   prob_T2   prob_T3  #> 0.2692308 0.2692308 0.4615385   # Blocked and Clustered Random Assignment Declarations  clusters <- rep(letters, times=1:26) blocks <- rep(NA, length(clusters)) blocks[clusters %in% letters[1:5]] <- \"block_1\" blocks[clusters %in% letters[6:10]] <- \"block_2\" blocks[clusters %in% letters[11:15]] <- \"block_3\" blocks[clusters %in% letters[16:20]] <- \"block_4\" blocks[clusters %in% letters[21:26]] <- \"block_5\"  table(blocks, clusters) #>          clusters #> blocks     a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w #>   block_1  1  2  3  4  5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>   block_2  0  0  0  0  0  6  7  8  9 10  0  0  0  0  0  0  0  0  0  0  0  0  0 #>   block_3  0  0  0  0  0  0  0  0  0  0 11 12 13 14 15  0  0  0  0  0  0  0  0 #>   block_4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 16 17 18 19 20  0  0  0 #>   block_5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 21 22 23 #>          clusters #> blocks     x  y  z #>   block_1  0  0  0 #>   block_2  0  0  0 #>   block_3  0  0  0 #>   block_4  0  0  0 #>   block_5 24 25 26  declare_ra(clusters = clusters, blocks = blocks) #> Random assignment procedure: Blocked and clustered random assignment  #> Number of units: 351  #> Number of blocks: 5 #> Number of clusters: 26 #> Number of treatment arms: 2  #> The possible treatment categories are 0 and 1. #> The number of possible random assignments is 3200000.   #> The probabilities of assignment are constant across units:  #> prob_0 prob_1  #>    0.5    0.5  declare_ra(clusters = clusters, blocks = blocks, prob_each = c(.2, .5, .3)) #> Random assignment procedure: Blocked and clustered random assignment  #> Number of units: 351  #> Number of blocks: 5 #> Number of clusters: 26 #> Number of treatment arms: 3  #> The possible treatment categories are T1 and T2 and T3. #> The number of possible random assignments is 6.144e+09.   #> The probabilities of assignment are constant across units:  #> prob_T1 prob_T2 prob_T3  #>     0.2     0.5     0.3"},{"path":"https://declaredesign.org/r/randomizr/reference/declare_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare a random sampling procedure. — declare_rs","title":"Declare a random sampling procedure. — declare_rs","text":"Declare random sampling procedure.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/declare_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare a random sampling procedure. — declare_rs","text":"","code":"declare_rs(   N = NULL,   strata = NULL,   clusters = NULL,   n = NULL,   n_unit = NULL,   prob = NULL,   prob_unit = NULL,   strata_n = NULL,   strata_prob = NULL,   simple = FALSE,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/declare_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare a random sampling procedure. — declare_rs","text":"N number units. N must positive integer. (required) strata vector length N indicates stratum unit belongs . clusters vector length N indicates cluster unit belongs . n Use design n units (clusters) sampled. stratified design, exactly n units stratum sampled. (optional) n_unit complete random sampling, must constant across units. stratified random sampling, must constant within strata. prob Use design either floor(N*prob) ceiling(N*prob) units (clusters) sampled. probability sampled exactly prob probability 1-prob, floor(N*prob) units (clusters) sampled probability prob, ceiling(N*prob) units (clusters) sampled. prob must real number 0 1 inclusive. (optional) prob_unit Must length N. simple random sampling, can different unit cluster.  complete random sampling, must constant across units. stratified random sampling, must constant within strata. strata_n Use design strata_n describes number units sample within stratum. strata_prob Use design strata_prob describes probability sampled within stratum. Differs prob probability sampled can vary across strata. simple logical, defaults FALSE. TRUE, simple random sampling used. simple = TRUE, please specify n strata_n. simple = TRUE, prob may vary unit. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/declare_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare a random sampling procedure. — declare_rs","text":"list class \"declaration\".  list five entries:   $rs_function, function generates random samplings according declaration.   $rs_type, string indicating type random sampling used   $probabilities_vector, vector length N indicating probability sampled.   $strata, stratification variable.   $clusters, clustering variable.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/declare_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare a random sampling procedure. — declare_rs","text":"","code":"# The declare_rs function is used in three ways:  # 1. To obtain some basic facts about a sampling procedure: declaration <- declare_rs(N = 100, n = 30) declaration #> Random sampling procedure: Complete random sampling  #> Number of units: 100  #> The inclusion probabilities are constant across units.  # 2. To draw a random sample:  S <- draw_rs(declaration) table(S) #> S #>  0  1  #> 70 30   # 3. To obtain inclusion probabilities  probs <- obtain_inclusion_probabilities(declaration) table(probs, S) #>      S #> probs  0  1 #>   0.3 70 30  # Simple Random Sampling Declarations  declare_rs(N = 100, simple = TRUE) #> Random sampling procedure: Simple random sampling  #> Number of units: 100  #> The inclusion probabilities are constant across units. declare_rs(N = 100, prob = .4, simple = TRUE) #> Random sampling procedure: Simple random sampling  #> Number of units: 100  #> The inclusion probabilities are constant across units.  # Complete Random Sampling Declarations  declare_rs(N = 100) #> Random sampling procedure: Complete random sampling  #> Number of units: 100  #> The inclusion probabilities are constant across units. declare_rs(N = 100, n = 30) #> Random sampling procedure: Complete random sampling  #> Number of units: 100  #> The inclusion probabilities are constant across units.  # Stratified Random Sampling Declarations  strata <- rep(c(\"A\", \"B\",\"C\"), times=c(50, 100, 200)) declare_rs(strata = strata) #> Random sampling procedure: Stratified random sampling  #> Number of units: 350  #> Number of strata: 3  #> The inclusion probabilities are constant across units. declare_rs(strata = strata, prob = .5) #> Random sampling procedure: Stratified random sampling  #> Number of units: 350  #> Number of strata: 3  #> The inclusion probabilities are constant across units.   # Cluster Random Sampling Declarations  clusters <- rep(letters, times = 1:26) declare_rs(clusters = clusters) #> Random sampling procedure: Cluster random sampling  #> Number of units: 351  #> Number of clusters: 26  #> The inclusion probabilities are constant across units. declare_rs(clusters = clusters, n = 10) #> Random sampling procedure: Cluster random sampling  #> Number of units: 351  #> Number of clusters: 26  #> The inclusion probabilities are constant across units.  # Stratified and Clustered Random Sampling Declarations  clusters <- rep(letters, times = 1:26) strata <- rep(NA, length(clusters)) strata[clusters %in% letters[1:5]] <- \"stratum_1\" strata[clusters %in% letters[6:10]] <- \"stratum_2\" strata[clusters %in% letters[11:15]] <- \"stratum_3\" strata[clusters %in% letters[16:20]] <- \"stratum_4\" strata[clusters %in% letters[21:26]] <- \"stratum_5\"  table(strata, clusters) #>            clusters #> strata       a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v #>   stratum_1  1  2  3  4  5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>   stratum_2  0  0  0  0  0  6  7  8  9 10  0  0  0  0  0  0  0  0  0  0  0  0 #>   stratum_3  0  0  0  0  0  0  0  0  0  0 11 12 13 14 15  0  0  0  0  0  0  0 #>   stratum_4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 16 17 18 19 20  0  0 #>   stratum_5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 21 22 #>            clusters #> strata       w  x  y  z #>   stratum_1  0  0  0  0 #>   stratum_2  0  0  0  0 #>   stratum_3  0  0  0  0 #>   stratum_4  0  0  0  0 #>   stratum_5 23 24 25 26  declare_rs(clusters = clusters, strata = strata) #> Random sampling procedure: Stratified and clustered random sampling  #> Number of units: 351  #> Number of strata: 5  #> Number of clusters: 26  #> The inclusion probabilities are constant across units. declare_rs(clusters = clusters, strata = strata, prob = .3) #> Random sampling procedure: Stratified and clustered random sampling  #> Number of units: 351  #> Number of strata: 5  #> Number of clusters: 26  #> The inclusion probabilities are constant across units."},{"path":"https://declaredesign.org/r/randomizr/reference/draw_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a random sample — draw_rs","title":"Draw a random sample — draw_rs","text":"can either give draw_rs() declaration, created declare_rs can specify arguments describe random sampling procedure.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/draw_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a random sample — draw_rs","text":"","code":"draw_rs(   declaration = NULL,   N = NULL,   strata = NULL,   clusters = NULL,   n = NULL,   n_unit = NULL,   prob = NULL,   prob_unit = NULL,   strata_n = NULL,   strata_prob = NULL,   simple = FALSE,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/draw_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a random sample — draw_rs","text":"declaration random sampling declaration, created declare_rs. N number units. N must positive integer. (required) strata vector length N indicates stratum unit belongs . clusters vector length N indicates cluster unit belongs . n Use design n units (clusters) sampled. stratified design, exactly n units stratum sampled. (optional) n_unit complete random sampling, must constant across units. stratified random sampling, must constant within strata. prob Use design either floor(N*prob) ceiling(N*prob) units (clusters) sampled. probability sampled exactly prob probability 1-prob, floor(N*prob) units (clusters) sampled probability prob, ceiling(N*prob) units (clusters) sampled. prob must real number 0 1 inclusive. (optional) prob_unit Must length N. simple random sampling, can different unit cluster.  complete random sampling, must constant across units. stratified random sampling, must constant within strata. strata_n Use design strata_n describes number units sample within stratum. strata_prob Use design strata_prob describes probability sampled within stratum. Differs prob probability sampled can vary across strata. simple logical, defaults FALSE. TRUE, simple random sampling used. simple = TRUE, please specify n strata_n. simple = TRUE, prob may vary unit. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/draw_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a random sample — draw_rs","text":"","code":"declaration <- declare_rs(N = 100, n = 30) S <- draw_rs(declaration = declaration) table(S) #> S #>  0  1  #> 70 30   # equivalent to S <- draw_rs(N = 100, n = 30) table(S) #> S #>  0  1  #> 70 30"},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_condition_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the probabilities of units being in the conditions that they are in. — obtain_condition_probabilities","title":"Obtain the probabilities of units being in the conditions that they are in. — obtain_condition_probabilities","text":"can either give obtain_condition_probabilities() declaration, created declare_ra can specify arguments describe random assignment procedure. function especially useful units different probabilities assignment analyst plans use inverse-probability weights.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_condition_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the probabilities of units being in the conditions that they are in. — obtain_condition_probabilities","text":"","code":"obtain_condition_probabilities(   declaration = NULL,   assignment,   N = NULL,   blocks = NULL,   clusters = NULL,   m = NULL,   m_unit = NULL,   m_each = NULL,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   block_m = NULL,   block_m_each = NULL,   block_prob = NULL,   block_prob_each = NULL,   num_arms = NULL,   conditions = NULL,   simple = FALSE,   permutation_matrix = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_condition_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the probabilities of units being in the conditions that they are in. — obtain_condition_probabilities","text":"declaration random assignment declaration, created declare_ra. assignment vector random assignments, often created conduct_ra. N number units. N must positive integer. (required) blocks vector length N indicates block unit belongs . clusters vector length N indicates cluster unit belongs . m Use two-arm design m units (clusters) assigned treatment N-m units (clusters) assigned control. blocked design, exactly m units block treated. (optional) m_unit Use two-arm trial. complete random assignment, must constant across units. blocked random assignment, must constant within blocks. m_each Use multi-arm design values m_each determine number units (clusters) assigned condition. m_each must numeric vector entry nonnegative integer describes many units (clusters) assigned 1st, 2nd, 3rd... treatment condition. m_each must sum N. (optional) prob Use two-arm design either floor(N*prob) ceiling(N*prob) units (clusters) assigned treatment. probability assignment treatment exactly prob probability 1-prob, floor(N*prob) units (clusters) assigned treatment probability prob, ceiling(N*prob) units (clusters) assigned treatment. prob must real number 0 1 inclusive. (optional) prob_unit Use two arm design. Must length N. simple random assignment, can different unit cluster.  complete random assignment, must constant across units. blocked random assignment, must constant within blocks. prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. integer issues, exact number units assigned condition may differ (slightly) assignment assignment, overall probability assignment exactly prob_each. (optional) block_m Use two-arm design block_m describes number units assign treatment within block. Note previous versions randomizr, block_m behaved like block_m_each. block_m_each Use multi-arm design values block_m_each determine number units (clusters) assigned condition. block_m_each must matrix number rows blocks number columns treatment arms. Cell entries number units (clusters) assigned treatment arm within block. rows respect ordering blocks determined sort(unique(blocks)). columns order conditions, specified. block_prob Use two-arm design block_prob describes probability assignment treatment within block. Differs prob probability assignment can vary across blocks. block_prob_each Use multi-arm design values block_prob_each determine probabilities assignment treatment condition. block_prob_each must matrix number rows blocks number columns treatment arms. Cell entries probabilities assignment treatment within block. rows respect ordering blocks determined sort(unique(blocks)). Use probabilities assignment vary block, otherwise use prob_each. row block_prob_each must sum 1. num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) simple logical, defaults FALSE. TRUE, simple random assignment used. simple = TRUE, please specify m, m_each, block_m, block_m_each. simple = TRUE, prob prob_each may vary unit. permutation_matrix custom random assignment procedures. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_condition_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain the probabilities of units being in the conditions that they are in. — obtain_condition_probabilities","text":"","code":"# Conduct a block random assignment blocks <- rep(c(\"A\", \"B\",\"C\"), times=c(50, 100, 200)) block_m_each <- rbind(c(10, 40),                  c(30, 70),                  c(50, 150)) declaration <- declare_ra(blocks = blocks, block_m_each = block_m_each) Z <- conduct_ra(declaration = declaration) table(Z, blocks) #>    blocks #> Z     A   B   C #>   0  10  30  50 #>   1  40  70 150  observed_probabilities <-    obtain_condition_probabilities(declaration = declaration, assignment = Z)   # Probabilities in the control group: table(observed_probabilities[Z == 0], blocks[Z == 0]) #>        #>         A  B  C #>   0.2  10  0  0 #>   0.25  0  0 50 #>   0.3   0 30  0  # Probabilities in the treatment group: table(observed_probabilities[Z == 1], blocks[Z == 1]) #>        #>          A   B   C #>   0.7    0  70   0 #>   0.75   0   0 150 #>   0.8   40   0   0   # Sometimes it is convenient to skip the declaration step Z <- conduct_ra(blocks = blocks, block_m_each = block_m_each) observed_probabilities <-    obtain_condition_probabilities(assignment = Z,                                   blocks = blocks,                                   block_m_each = block_m_each) table(observed_probabilities[Z == 0], blocks[Z == 0]) #>        #>         A  B  C #>   0.2  10  0  0 #>   0.25  0  0 50 #>   0.3   0 30  0 table(observed_probabilities[Z == 1], blocks[Z == 1]) #>        #>          A   B   C #>   0.7    0  70   0 #>   0.75   0   0 150 #>   0.8   40   0   0"},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_inclusion_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain inclusion probabilities — obtain_inclusion_probabilities","title":"Obtain inclusion probabilities — obtain_inclusion_probabilities","text":"can either give obtain_inclusion_probabilities() declaration, created declare_rs can specify arguments describe random sampling procedure. function especially useful units different inclusion probabilities analyst plans use inverse-probability weights.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_inclusion_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain inclusion probabilities — obtain_inclusion_probabilities","text":"","code":"obtain_inclusion_probabilities(   declaration = NULL,   N = NULL,   strata = NULL,   clusters = NULL,   n = NULL,   n_unit = NULL,   prob = NULL,   prob_unit = NULL,   strata_n = NULL,   strata_prob = NULL,   simple = FALSE,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_inclusion_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain inclusion probabilities — obtain_inclusion_probabilities","text":"declaration random sampling declaration, created declare_rs. N number units. N must positive integer. (required) strata vector length N indicates stratum unit belongs . clusters vector length N indicates cluster unit belongs . n Use design n units (clusters) sampled. stratified design, exactly n units stratum sampled. (optional) n_unit complete random sampling, must constant across units. stratified random sampling, must constant within strata. prob Use design either floor(N*prob) ceiling(N*prob) units (clusters) sampled. probability sampled exactly prob probability 1-prob, floor(N*prob) units (clusters) sampled probability prob, ceiling(N*prob) units (clusters) sampled. prob must real number 0 1 inclusive. (optional) prob_unit Must length N. simple random sampling, can different unit cluster.  complete random sampling, must constant across units. stratified random sampling, must constant within strata. strata_n Use design strata_n describes number units sample within stratum. strata_prob Use design strata_prob describes probability sampled within stratum. Differs prob probability sampled can vary across strata. simple logical, defaults FALSE. TRUE, simple random sampling used. simple = TRUE, please specify n strata_n. simple = TRUE, prob may vary unit. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_inclusion_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain inclusion probabilities — obtain_inclusion_probabilities","text":"","code":"# Draw a stratified random sample strata <- rep(c(\"A\", \"B\",\"C\"), times=c(50, 100, 200))  declaration <- declare_rs(strata = strata)  observed_probabilities <-    obtain_inclusion_probabilities(declaration = declaration)  table(strata, observed_probabilities) #>       observed_probabilities #> strata 0.5 #>      A  50 #>      B 100 #>      C 200   # Sometimes it is convenient to skip the declaration step observed_probabilities <-    obtain_inclusion_probabilities(strata = strata)  table(strata, observed_probabilities) #>       observed_probabilities #> strata 0.5 #>      A  50 #>      B 100 #>      C 200"},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_num_permutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the Number of Possible Permutations from a Random Assignment Declaration — obtain_num_permutations","title":"Obtain the Number of Possible Permutations from a Random Assignment Declaration — obtain_num_permutations","text":"Obtain Number Possible Permutations Random Assignment Declaration","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_num_permutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the Number of Possible Permutations from a Random Assignment Declaration — obtain_num_permutations","text":"","code":"obtain_num_permutations(declaration)"},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_num_permutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the Number of Possible Permutations from a Random Assignment Declaration — obtain_num_permutations","text":"declaration random assignment sampling declaration, created declare_ra declare_rs.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_num_permutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the Number of Possible Permutations from a Random Assignment Declaration — obtain_num_permutations","text":"scalar","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_num_permutations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain the Number of Possible Permutations from a Random Assignment Declaration — obtain_num_permutations","text":"","code":"# Random assignment ## complete  declaration <- declare_ra(N = 4) perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1] 4 6 obtain_num_permutations(declaration) #> [1] 6  ## blocked  blocks <- c(\"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"C\") declaration <- declare_ra(blocks = blocks) perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1]  7 24 obtain_num_permutations(declaration) #> [1] 24  ## clustered  clusters <- c(\"A\", \"B\", \"A\", \"B\", \"C\", \"C\", \"C\") declaration <- declare_ra(clusters = clusters) perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1] 7 6 obtain_num_permutations(declaration) #> [1] 6  ## large  declaration <- declare_ra(20) choose(20, 10) #> [1] 184756 perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1]    20 10000  # Random sampling ## complete  declaration <- declare_rs(N = 4) perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1] 4 6 obtain_num_permutations(declaration) #> [1] 6  ## stratified  strata <- c(\"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"C\") declaration <- declare_rs(strata = strata) perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1]  7 24 obtain_num_permutations(declaration) #> [1] 24  ## clustered  clusters <- c(\"A\", \"B\", \"A\", \"B\", \"C\", \"C\", \"C\") declaration <- declare_rs(clusters = clusters) perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1] 7 6 obtain_num_permutations(declaration) #> [1] 6  ## large  declaration <- declare_rs(N = 20) perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1]    20 10000"},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_permutation_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Permutation Matrix from a Random Assignment Declaration — obtain_permutation_matrix","title":"Obtain Permutation Matrix from a Random Assignment Declaration — obtain_permutation_matrix","text":"Obtain Permutation Matrix Random Assignment Declaration","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_permutation_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Permutation Matrix from a Random Assignment Declaration — obtain_permutation_matrix","text":"","code":"obtain_permutation_matrix(declaration, maximum_permutations = 10000)"},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_permutation_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Permutation Matrix from a Random Assignment Declaration — obtain_permutation_matrix","text":"declaration random assignment declaration, created declare_ra. maximum_permutations number possible random assignments exceeds maximum_permutations, obtain_permutation_matrix return random sample maximum_permutations permutations. Defaults 10,000.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_permutation_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Permutation Matrix from a Random Assignment Declaration — obtain_permutation_matrix","text":"matrix possible (random sample possible) random assignments consistent declaration.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_permutation_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain Permutation Matrix from a Random Assignment Declaration — obtain_permutation_matrix","text":"","code":"# complete  declaration <- declare_ra(N = 4) perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1] 4 6 obtain_num_permutations(declaration) #> [1] 6  # blocked  blocks <- c(\"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"C\") declaration <- declare_ra(blocks = blocks) perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1]  7 24 obtain_num_permutations(declaration) #> [1] 24  # clustered  clusters <- c(\"A\", \"B\", \"A\", \"B\", \"C\", \"C\", \"C\") declaration <- declare_ra(clusters = clusters) perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1] 7 6 obtain_num_permutations(declaration) #> [1] 6  # large  declaration <- declare_ra(20) choose(20, 10) #> [1] 184756 perms <- obtain_permutation_matrix(declaration) dim(perms) #> [1]    20 10000"},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_permutation_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the probabilities of permutations — obtain_permutation_probabilities","title":"Obtain the probabilities of permutations — obtain_permutation_probabilities","text":"Obtain probabilities permutations","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_permutation_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the probabilities of permutations — obtain_permutation_probabilities","text":"","code":"obtain_permutation_probabilities(declaration)"},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_permutation_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the probabilities of permutations — obtain_permutation_probabilities","text":"declaration random assignment declaration, created declare_ra.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_permutation_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the probabilities of permutations — obtain_permutation_probabilities","text":"vector probabilities","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/obtain_permutation_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain the probabilities of permutations — obtain_permutation_probabilities","text":"","code":"declaration <- declare_ra(N = 5, prob_each = c(.49, .51)) obtain_num_permutations(declaration) #> [1] 20 perm_probs <- obtain_permutation_probabilities(declaration) perms <- obtain_permutation_matrix(declaration)  # probabilities of assignment from declaration *should* match the average over all permutations true_probabilities <- declaration$probabilities_matrix[,2] true_probabilities #> [1] 0.51 0.51 0.51 0.51 0.51  # correctly WRONG because the perms have different probs! rowMeans(perms) #> [1] 0.5 0.5 0.5 0.5 0.5  # correctly correct! perms %*% perm_probs #>      [,1] #> [1,] 0.51 #> [2,] 0.51 #> [3,] 0.51 #> [4,] 0.51 #> [5,] 0.51"},{"path":"https://declaredesign.org/r/randomizr/reference/randomizr.html","id":null,"dir":"Reference","previous_headings":"","what":"randomizr — randomizr","title":"randomizr — randomizr","text":"Easy--Use Tools Common Forms Random Assignment Sampling","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_ra.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Random Assignment — simple_ra","title":"Simple Random Assignment — simple_ra","text":"simple_ra implements random assignment procedure units independently assigned treatment conditions. units assigned independently, number units assigned condition can vary assignment assignment. experimental applications number experimental units known advance, complete_ra better number units assigned condition fixed across assignments. cases, users specify N one prob, prob_each, num_arms.  N specified, two-arm trial prob = 0.5 assumed.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_ra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Random Assignment — simple_ra","text":"","code":"simple_ra(   N,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   num_arms = NULL,   conditions = NULL,   check_inputs = TRUE,   simple = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/simple_ra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Random Assignment — simple_ra","text":"N number units. N must positive integer. (required) prob Use two-arm design. prob probability assignment treatment must real number 0 1 inclusive must length 1. (optional) prob_unit Use two-arm design. prob probability assignment treatment must real number 0 1 inclusive must length N. (optional) prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. may conditions-length vector N--conditions matrix.  (optional) num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) check_inputs logical. Defaults TRUE. simple logical. internal use .","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_ra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Random Assignment — simple_ra","text":"vector length N indicates treatment condition unit. numeric two-arm trial factor variable (ordered conditions) multi-arm trial.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_ra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Random Assignment — simple_ra","text":"","code":"# Two Group Designs  Z <- simple_ra(N=100) table(Z) #> Z #>  0  1  #> 45 55   Z <- simple_ra(N=100, prob=0.5) table(Z) #> Z #>  0  1  #> 51 49   Z <- simple_ra(N=100, prob_each = c(0.3, 0.7),                conditions = c(\"control\", \"treatment\")) table(Z) #> Z #>   control treatment  #>        31        69   # Multi-arm Designs Z <- simple_ra(N=100, num_arms=3) table(Z) #> Z #> T1 T2 T3  #> 39 28 33   Z <- simple_ra(N=100, prob_each=c(0.3, 0.3, 0.4)) table(Z) #> Z #> T1 T2 T3  #> 38 30 32   Z <- simple_ra(N=100, prob_each=c(0.3, 0.3, 0.4),                conditions=c(\"control\", \"placebo\", \"treatment\")) table(Z) #> Z #>   control   placebo treatment  #>        28        33        39   Z <- simple_ra(N=100, conditions=c(\"control\", \"placebo\", \"treatment\")) table(Z) #> Z #>   control   placebo treatment  #>        33        33        34"},{"path":"https://declaredesign.org/r/randomizr/reference/simple_ra_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"probabilities of assignment: Simple Random Assignment — simple_ra_probabilities","title":"probabilities of assignment: Simple Random Assignment — simple_ra_probabilities","text":"probabilities assignment: Simple Random Assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_ra_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"probabilities of assignment: Simple Random Assignment — simple_ra_probabilities","text":"","code":"simple_ra_probabilities(   N,   prob = NULL,   prob_unit = NULL,   prob_each = NULL,   num_arms = NULL,   conditions = NULL,   check_inputs = TRUE,   simple = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/simple_ra_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"probabilities of assignment: Simple Random Assignment — simple_ra_probabilities","text":"N number units. N must positive integer. (required) prob Use two-arm design. prob probability assignment treatment must real number 0 1 inclusive must length 1. (optional) prob_unit Use two-arm design. prob probability assignment treatment must real number 0 1 inclusive must length N. (optional) prob_each Use multi-arm design values prob_each determine probabilities assignment treatment condition. prob_each must numeric vector giving probability assignment condition. entries must nonnegative real numbers 0 1 inclusive total must sum 1. may conditions-length vector N--conditions matrix.  (optional) num_arms number treatment arms. unspecified, num_arms determined arguments. (optional) conditions character vector giving names treatment groups. unspecified, treatment groups named 0 (control) 1 (treatment) two-arm trial T1, T2, T3, multi-arm trial. exception two-group design num_arms set 2, case condition names T1 T2, multi-arm trial two arms. (optional) check_inputs logical. Defaults TRUE. simple logical. internal use .","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_ra_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"probabilities of assignment: Simple Random Assignment — simple_ra_probabilities","text":"matrix probabilities assignment","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_ra_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"probabilities of assignment: Simple Random Assignment — simple_ra_probabilities","text":"","code":"# Two Group Designs prob_mat <- simple_ra_probabilities(N=100) head(prob_mat) #>      prob_0 prob_1 #> [1,]    0.5    0.5 #> [2,]    0.5    0.5 #> [3,]    0.5    0.5 #> [4,]    0.5    0.5 #> [5,]    0.5    0.5 #> [6,]    0.5    0.5  prob_mat <- simple_ra_probabilities(N=100, prob=0.5) head(prob_mat) #>      prob_0 prob_1 #> [1,]    0.5    0.5 #> [2,]    0.5    0.5 #> [3,]    0.5    0.5 #> [4,]    0.5    0.5 #> [5,]    0.5    0.5 #> [6,]    0.5    0.5  prob_mat <- simple_ra_probabilities(N=100, prob_each = c(0.3, 0.7),                         conditions = c(\"control\", \"treatment\")) head(prob_mat) #>      prob_control prob_treatment #> [1,]          0.3            0.7 #> [2,]          0.3            0.7 #> [3,]          0.3            0.7 #> [4,]          0.3            0.7 #> [5,]          0.3            0.7 #> [6,]          0.3            0.7  # Multi-arm Designs prob_mat <- simple_ra_probabilities(N=100, num_arms=3) head(prob_mat) #>        prob_T1   prob_T2   prob_T3 #> [1,] 0.3333333 0.3333333 0.3333333 #> [2,] 0.3333333 0.3333333 0.3333333 #> [3,] 0.3333333 0.3333333 0.3333333 #> [4,] 0.3333333 0.3333333 0.3333333 #> [5,] 0.3333333 0.3333333 0.3333333 #> [6,] 0.3333333 0.3333333 0.3333333  prob_mat <- simple_ra_probabilities(N=100, prob_each=c(0.3, 0.3, 0.4)) head(prob_mat) #>      prob_T1 prob_T2 prob_T3 #> [1,]     0.3     0.3     0.4 #> [2,]     0.3     0.3     0.4 #> [3,]     0.3     0.3     0.4 #> [4,]     0.3     0.3     0.4 #> [5,]     0.3     0.3     0.4 #> [6,]     0.3     0.3     0.4  prob_mat <- simple_ra_probabilities(N=100, prob_each=c(0.3, 0.3, 0.4),                         conditions=c(\"control\", \"placebo\", \"treatment\")) head(prob_mat) #>      prob_control prob_placebo prob_treatment #> [1,]          0.3          0.3            0.4 #> [2,]          0.3          0.3            0.4 #> [3,]          0.3          0.3            0.4 #> [4,]          0.3          0.3            0.4 #> [5,]          0.3          0.3            0.4 #> [6,]          0.3          0.3            0.4  prob_mat <- simple_ra_probabilities(N=100, conditions=c(\"control\", \"placebo\", \"treatment\")) head(prob_mat) #>      prob_control prob_placebo prob_treatment #> [1,]    0.3333333    0.3333333      0.3333333 #> [2,]    0.3333333    0.3333333      0.3333333 #> [3,]    0.3333333    0.3333333      0.3333333 #> [4,]    0.3333333    0.3333333      0.3333333 #> [5,]    0.3333333    0.3333333      0.3333333 #> [6,]    0.3333333    0.3333333      0.3333333"},{"path":"https://declaredesign.org/r/randomizr/reference/simple_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Random Sampling — simple_rs","title":"Simple Random Sampling — simple_rs","text":"simple_rs implements random sampling procedure units independently sampled. units sampled independently, number units sampled can vary sample sample. applications number units sampling frame known advance, complete_rs better number units sampled fixed across sampled.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Random Sampling — simple_rs","text":"","code":"simple_rs(N, prob = NULL, prob_unit = NULL, check_inputs = TRUE, simple = TRUE)"},{"path":"https://declaredesign.org/r/randomizr/reference/simple_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Random Sampling — simple_rs","text":"N number units. N must positive integer. (required) prob prob probability sampled must real number 0 1 inclusive, must length 1. (optional) prob_unit prob probability sampled must real number 0 1 inclusive, must length N. (optional) check_inputs logical. Defaults TRUE. simple logical. internal use .","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Random Sampling — simple_rs","text":"numeric vector length N indicates unit sampled (1) (0).","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Random Sampling — simple_rs","text":"","code":"S <- simple_rs(N = 100) table(S) #> S #>  0  1  #> 47 53   S <- simple_rs(N = 100, prob = 0.3) table(S) #> S #>  0  1  #> 69 31"},{"path":"https://declaredesign.org/r/randomizr/reference/simple_rs_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Inclusion Probabilities: Simple Random Sampling — simple_rs_probabilities","title":"Inclusion Probabilities: Simple Random Sampling — simple_rs_probabilities","text":"Inclusion Probabilities: Simple Random Sampling","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_rs_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inclusion Probabilities: Simple Random Sampling — simple_rs_probabilities","text":"","code":"simple_rs_probabilities(   N,   prob = NULL,   prob_unit = NULL,   check_inputs = TRUE,   simple = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/simple_rs_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inclusion Probabilities: Simple Random Sampling — simple_rs_probabilities","text":"N number units. N must positive integer. (required) prob prob probability sampled must real number 0 1 inclusive, must length 1. (optional) prob_unit prob probability sampled must real number 0 1 inclusive, must length N. (optional) check_inputs logical. Defaults TRUE. simple logical. internal use .","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_rs_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inclusion Probabilities: Simple Random Sampling — simple_rs_probabilities","text":"vector length N indicating probability sampled.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/simple_rs_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inclusion Probabilities: Simple Random Sampling — simple_rs_probabilities","text":"","code":"probs <- simple_ra_probabilities(N = 100) table(probs) #> probs #> 0.5  #> 200   probs <- simple_ra_probabilities(N = 100, prob = 0.3) table(probs) #> probs #> 0.3 0.7  #> 100 100"},{"path":"https://declaredesign.org/r/randomizr/reference/strata_and_cluster_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratified and Clustered Random Sampling — strata_and_cluster_rs","title":"Stratified and Clustered Random Sampling — strata_and_cluster_rs","text":"random sampling procedure units sampled clusters clusters nested within strata.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_and_cluster_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratified and Clustered Random Sampling — strata_and_cluster_rs","text":"","code":"strata_and_cluster_rs(   strata = NULL,   clusters = NULL,   prob = NULL,   prob_unit = NULL,   n = NULL,   n_unit = NULL,   strata_n = NULL,   strata_prob = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/strata_and_cluster_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratified and Clustered Random Sampling — strata_and_cluster_rs","text":"strata vector length N indicates stratum unit belongs . clusters vector length N indicates cluster unit belongs . prob Use design either floor(N_clusters_stratum*prob) ceiling(N_clusters_stratum*prob) clusters sampled within stratum. probability sampled exactly prob probability 1-prob, floor(N_clusters_stratum*prob) clusters sampled probability prob, ceiling(N_clusters_stratum*prob) clusters sampled. prob must real number 0 1 inclusive. (optional) prob_unit Must length N. tapply(prob_unit, blocks, unique) passed strata_prob. n Use design scalar n describes fixed number units sample stratum. number vary across strata. n_unit Must length N. tapply(m_unit, blocks, unique) passed strata_n. strata_n Use design strata_n describes number units sample within stratum. strata_prob Use design strata_prob describes probability sampled within stratum. Differs prob probability sampled can vary across strata. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_and_cluster_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratified and Clustered Random Sampling — strata_and_cluster_rs","text":"numeric vector length N indicates unit sampled (1) (0).","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_and_cluster_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratified and Clustered Random Sampling — strata_and_cluster_rs","text":"","code":"clusters <- rep(letters, times = 1:26)  strata <- rep(NA, length(clusters)) strata[clusters %in% letters[1:5]] <- \"stratum_1\" strata[clusters %in% letters[6:10]] <- \"stratum_2\" strata[clusters %in% letters[11:15]] <- \"stratum_3\" strata[clusters %in% letters[16:20]] <- \"stratum_4\" strata[clusters %in% letters[21:26]] <- \"stratum_5\"  table(strata, clusters) #>            clusters #> strata       a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v #>   stratum_1  1  2  3  4  5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>   stratum_2  0  0  0  0  0  6  7  8  9 10  0  0  0  0  0  0  0  0  0  0  0  0 #>   stratum_3  0  0  0  0  0  0  0  0  0  0 11 12 13 14 15  0  0  0  0  0  0  0 #>   stratum_4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 16 17 18 19 20  0  0 #>   stratum_5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 21 22 #>            clusters #> strata       w  x  y  z #>   stratum_1  0  0  0  0 #>   stratum_2  0  0  0  0 #>   stratum_3  0  0  0  0 #>   stratum_4  0  0  0  0 #>   stratum_5 23 24 25 26  S <- strata_and_cluster_rs(strata = strata,                           clusters = clusters)  table(S, strata) #>    strata #> S   stratum_1 stratum_2 stratum_3 stratum_4 stratum_5 #>   0         6        27        27        53        70 #>   1         9        13        38        37        71 table(S, clusters) #>    clusters #> S    a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   0  1  2  3  0  0  0  0  8  9 10  0  0 13 14  0 16 17  0  0 20 21  0  0 24 25 #>   1  0  0  0  4  5  6  7  0  0  0 11 12  0  0 15  0  0 18 19  0  0 22 23  0  0 #>    clusters #> S    z #>   0  0 #>   1 26   S <- strata_and_cluster_rs(clusters = clusters,                            strata = strata,                            prob = .5)  table(S, clusters) #>    clusters #> S    a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   0  1  0  0  4  5  0  7  8  0 10 11 12  0  0  0 16 17  0  0 20 21  0 23  0 25 #>   1  0  2  3  0  0  6  0  0  9  0  0  0 13 14 15  0  0 18 19  0  0 22  0 24  0 #>    clusters #> S    z #>   0  0 #>   1 26 table(S, strata) #>    strata #> S   stratum_1 stratum_2 stratum_3 stratum_4 stratum_5 #>   0        10        25        23        53        69 #>   1         5        15        42        37        72  S <- strata_and_cluster_rs(clusters = clusters,                            strata = strata,                            strata_n = c(2, 3, 2, 3, 2))  table(S, clusters) #>    clusters #> S    a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   0  0  0  3  4  5  0  7  8  0  0  0 12 13  0 15  0 17 18  0  0  0 22 23 24 25 #>   1  1  2  0  0  0  6  0  0  9 10 11  0  0 14  0 16  0  0 19 20 21  0  0  0  0 #>    clusters #> S    z #>   0  0 #>   1 26 table(S, strata) #>    strata #> S   stratum_1 stratum_2 stratum_3 stratum_4 stratum_5 #>   0        12        15        40        35        94 #>   1         3        25        25        55        47  S <- strata_and_cluster_rs(clusters = clusters,                            strata = strata,                            strata_prob = c(.1, .2, .3, .4, .5))  table(S, clusters) #>    clusters #> S    a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y #>   0  1  2  3  4  5  0  7  8  9 10 11  0 13 14 15  0 17 18 19  0  0 22  0 24  0 #>   1  0  0  0  0  0  6  0  0  0  0  0 12  0  0  0 16  0  0  0 20 21  0 23  0 25 #>    clusters #> S    z #>   0 26 #>   1  0 table(S, strata) #>    strata #> S   stratum_1 stratum_2 stratum_3 stratum_4 stratum_5 #>   0        15        34        53        54        72 #>   1         0         6        12        36        69"},{"path":"https://declaredesign.org/r/randomizr/reference/strata_and_cluster_rs_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Inclusion Probabilities: Stratified and Clustered Random Sampling — strata_and_cluster_rs_probabilities","title":"Inclusion Probabilities: Stratified and Clustered Random Sampling — strata_and_cluster_rs_probabilities","text":"Inclusion Probabilities: Stratified Clustered Random Sampling","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_and_cluster_rs_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inclusion Probabilities: Stratified and Clustered Random Sampling — strata_and_cluster_rs_probabilities","text":"","code":"strata_and_cluster_rs_probabilities(   strata = NULL,   clusters = NULL,   prob = NULL,   prob_unit = NULL,   n = NULL,   n_unit = NULL,   strata_n = NULL,   strata_prob = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/strata_and_cluster_rs_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inclusion Probabilities: Stratified and Clustered Random Sampling — strata_and_cluster_rs_probabilities","text":"strata vector length N indicates stratum unit belongs . clusters vector length N indicates cluster unit belongs . prob Use design either floor(N_clusters_stratum*prob) ceiling(N_clusters_stratum*prob) clusters sampled within stratum. probability sampled exactly prob probability 1-prob, floor(N_clusters_stratum*prob) clusters sampled probability prob, ceiling(N_clusters_stratum*prob) clusters sampled. prob must real number 0 1 inclusive. (optional) prob_unit Must length N. tapply(prob_unit, blocks, unique) passed strata_prob. n Use design scalar n describes fixed number units sample stratum. number vary across strata. n_unit Must length N. tapply(m_unit, blocks, unique) passed strata_n. strata_n Use design strata_n describes number units sample within stratum. strata_prob Use design strata_prob describes probability sampled within stratum. Differs prob probability sampled can vary across strata. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_and_cluster_rs_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inclusion Probabilities: Stratified and Clustered Random Sampling — strata_and_cluster_rs_probabilities","text":"vector length N indicating probability sampled.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_and_cluster_rs_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inclusion Probabilities: Stratified and Clustered Random Sampling — strata_and_cluster_rs_probabilities","text":"","code":"clusters <- rep(letters, times = 1:26)  strata <- rep(NA, length(clusters)) strata[clusters %in% letters[1:5]] <- \"stratum_1\" strata[clusters %in% letters[6:10]] <- \"stratum_2\" strata[clusters %in% letters[11:15]] <- \"stratum_3\" strata[clusters %in% letters[16:20]] <- \"stratum_4\" strata[clusters %in% letters[21:26]] <- \"stratum_5\"  table(strata, clusters) #>            clusters #> strata       a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v #>   stratum_1  1  2  3  4  5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>   stratum_2  0  0  0  0  0  6  7  8  9 10  0  0  0  0  0  0  0  0  0  0  0  0 #>   stratum_3  0  0  0  0  0  0  0  0  0  0 11 12 13 14 15  0  0  0  0  0  0  0 #>   stratum_4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 16 17 18 19 20  0  0 #>   stratum_5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 21 22 #>            clusters #> strata       w  x  y  z #>   stratum_1  0  0  0  0 #>   stratum_2  0  0  0  0 #>   stratum_3  0  0  0  0 #>   stratum_4  0  0  0  0 #>   stratum_5 23 24 25 26  probs <- strata_and_cluster_rs_probabilities(strata = strata,                                          clusters = clusters)  table(probs, strata) #>      strata #> probs stratum_1 stratum_2 stratum_3 stratum_4 stratum_5 #>   0.5        15        40        65        90       141 table(probs, clusters) #>      clusters #> probs  a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x #>   0.5  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #>      clusters #> probs  y  z #>   0.5 25 26   probs <- strata_and_cluster_rs_probabilities(clusters = clusters,                                          strata = strata,                                          prob = .5)  table(probs, clusters) #>      clusters #> probs  a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x #>   0.5  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #>      clusters #> probs  y  z #>   0.5 25 26 table(probs, strata) #>      strata #> probs stratum_1 stratum_2 stratum_3 stratum_4 stratum_5 #>   0.5        15        40        65        90       141  probs <- strata_and_cluster_rs_probabilities(clusters = clusters,                                          strata = strata,                                          strata_n = c(2, 3, 2, 3, 2))  table(probs, clusters) #>                    clusters #> probs                a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t #>   0.333333333333333  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>   0.4                1  2  3  4  5  0  0  0  0  0 11 12 13 14 15  0  0  0  0  0 #>   0.6                0  0  0  0  0  6  7  8  9 10  0  0  0  0  0 16 17 18 19 20 #>                    clusters #> probs                u  v  w  x  y  z #>   0.333333333333333 21 22 23 24 25 26 #>   0.4                0  0  0  0  0  0 #>   0.6                0  0  0  0  0  0 table(probs, strata) #>                    strata #> probs               stratum_1 stratum_2 stratum_3 stratum_4 stratum_5 #>   0.333333333333333         0         0         0         0       141 #>   0.4                      15         0        65         0         0 #>   0.6                       0        40         0        90         0  probs <- strata_and_cluster_rs_probabilities(clusters = clusters,                                          strata = strata,                                          strata_prob = c(.1, .2, .3, .4, .5))  table(probs, clusters) #>      clusters #> probs  a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x #>   0.1  1  2  3  4  5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>   0.2  0  0  0  0  0  6  7  8  9 10  0  0  0  0  0  0  0  0  0  0  0  0  0  0 #>   0.3  0  0  0  0  0  0  0  0  0  0 11 12 13 14 15  0  0  0  0  0  0  0  0  0 #>   0.4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 16 17 18 19 20  0  0  0  0 #>   0.5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 21 22 23 24 #>      clusters #> probs  y  z #>   0.1  0  0 #>   0.2  0  0 #>   0.3  0  0 #>   0.4  0  0 #>   0.5 25 26 table(probs, strata) #>      strata #> probs stratum_1 stratum_2 stratum_3 stratum_4 stratum_5 #>   0.1        15         0         0         0         0 #>   0.2         0        40         0         0         0 #>   0.3         0         0        65         0         0 #>   0.4         0         0         0        90         0 #>   0.5         0         0         0         0       141"},{"path":"https://declaredesign.org/r/randomizr/reference/strata_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratified Random Sampling — strata_rs","title":"Stratified Random Sampling — strata_rs","text":"strata_rs implements random sampling procedure units grouped strata defined covariates sample using complete random sampling within stratum example, imagine 50 100 men sampled 75 200 women sampled.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratified Random Sampling — strata_rs","text":"","code":"strata_rs(   strata = NULL,   prob = NULL,   prob_unit = NULL,   n = NULL,   n_unit = NULL,   strata_n = NULL,   strata_prob = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/strata_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratified Random Sampling — strata_rs","text":"strata vector length N indicates stratum unit belongs . Can character, factor, numeric vector. (required) prob Use design either floor(N_stratum*prob) ceiling(N_stratum*prob) units sampled within stratum. probability  sampled exactly prob probability 1-prob, floor(N_stratum*prob) units sampled probability prob, ceiling(N_stratum*prob) units sampled. prob must real number 0 1 inclusive. (optional) prob_unit Must length N. tapply(prob_unit, strata, unique) passed strata_prob. n Use design scalar n describes fixed number units sample stratum. number vary across strata. n_unit Must length N. tapply(m_unit, strata, unique) passed strata_n. strata_n Use design numeric vector strata_n describes number units sample within stratum. strata_prob Use design strata_prob describes probability sampled within stratum. Differs prob probability sampled can vary across strata. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratified Random Sampling — strata_rs","text":"numeric vector length N indicates unit sampled (1) (0).","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratified Random Sampling — strata_rs","text":"","code":"strata <- rep(c(\"A\", \"B\",\"C\"), times = c(50, 100, 200)) Z <- strata_rs(strata = strata) table(strata, Z) #>       Z #> strata   0   1 #>      A  25  25 #>      B  50  50 #>      C 100 100  Z <- strata_rs(strata = strata, prob = .3) table(strata, Z) #>       Z #> strata   0   1 #>      A  35  15 #>      B  70  30 #>      C 140  60  Z <- strata_rs(strata = strata, n = 20) table(strata, Z) #>       Z #> strata   0   1 #>      A  30  20 #>      B  80  20 #>      C 180  20  Z <- strata_rs(strata = strata, strata_prob = c(.1, .2, .3)) table(strata, Z) #>       Z #> strata   0   1 #>      A  45   5 #>      B  80  20 #>      C 140  60  Z <- strata_rs(strata = strata,                 prob_unit = rep(c(.1, .2, .3), times = c(50, 100, 200))) table(strata, Z) #>       Z #> strata   0   1 #>      A  45   5 #>      B  80  20 #>      C 140  60  Z <- strata_rs(strata = strata, strata_n = c(20, 30, 40)) table(strata, Z) #>       Z #> strata   0   1 #>      A  30  20 #>      B  70  30 #>      C 160  40  Z <- strata_rs(strata = strata,                 n_unit = rep(c(20, 30, 40), times = c(50, 100, 200))) table(strata, Z) #>       Z #> strata   0   1 #>      A  30  20 #>      B  70  30 #>      C 160  40"},{"path":"https://declaredesign.org/r/randomizr/reference/strata_rs_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Inclusion Probabilities: Stratified Random Sampling — strata_rs_probabilities","title":"Inclusion Probabilities: Stratified Random Sampling — strata_rs_probabilities","text":"Inclusion Probabilities: Stratified Random Sampling","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_rs_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inclusion Probabilities: Stratified Random Sampling — strata_rs_probabilities","text":"","code":"strata_rs_probabilities(   strata = NULL,   prob = NULL,   prob_unit = NULL,   n = NULL,   n_unit = NULL,   strata_n = NULL,   strata_prob = NULL,   check_inputs = TRUE )"},{"path":"https://declaredesign.org/r/randomizr/reference/strata_rs_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inclusion Probabilities: Stratified Random Sampling — strata_rs_probabilities","text":"strata vector length N indicates stratum unit belongs . Can character, factor, numeric vector. (required) prob Use design either floor(N_stratum*prob) ceiling(N_stratum*prob) units sampled within stratum. probability  sampled exactly prob probability 1-prob, floor(N_stratum*prob) units sampled probability prob, ceiling(N_stratum*prob) units sampled. prob must real number 0 1 inclusive. (optional) prob_unit Must length N. tapply(prob_unit, strata, unique) passed strata_prob. n Use design scalar n describes fixed number units sample stratum. number vary across strata. n_unit Must length N. tapply(m_unit, strata, unique) passed strata_n. strata_n Use design numeric vector strata_n describes number units sample within stratum. strata_prob Use design strata_prob describes probability sampled within stratum. Differs prob probability sampled can vary across strata. check_inputs logical. Defaults TRUE.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_rs_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inclusion Probabilities: Stratified Random Sampling — strata_rs_probabilities","text":"vector length N indicating probability sampled.","code":""},{"path":"https://declaredesign.org/r/randomizr/reference/strata_rs_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inclusion Probabilities: Stratified Random Sampling — strata_rs_probabilities","text":"","code":"strata <- rep(c(\"A\", \"B\",\"C\"), times = c(50, 100, 200)) probs <- strata_rs_probabilities(strata = strata) table(strata, probs) #>       probs #> strata 0.5 #>      A  50 #>      B 100 #>      C 200  probs <- strata_rs_probabilities(strata = strata, prob = .2) table(strata, probs) #>       probs #> strata 0.2 #>      A  50 #>      B 100 #>      C 200  probs <- strata_rs_probabilities(strata = strata, strata_prob = c(.1, .2, .3)) table(strata, probs) #>       probs #> strata 0.1 0.2 0.3 #>      A  50   0   0 #>      B   0 100   0 #>      C   0   0 200  probs <- strata_rs_probabilities(strata = strata, strata_n = c(10, 40, 70)) table(strata, probs) #>       probs #> strata 0.2 0.35 0.4 #>      A  50    0   0 #>      B   0    0 100 #>      C   0  200   0"},{"path":"https://declaredesign.org/r/randomizr/news/index.html","id":"randomizr-100","dir":"Changelog","previous_headings":"","what":"randomizr 1.0.0","title":"randomizr 1.0.0","text":"CRAN release: 2023-08-10 Documentation fix","code":""},{"path":"https://declaredesign.org/r/randomizr/news/index.html","id":"randomizr-0240","dir":"Changelog","previous_headings":"","what":"randomizr 0.24.0","title":"randomizr 0.24.0","text":"CRAN release: 2023-02-10 Documentation fix","code":""},{"path":"https://declaredesign.org/r/randomizr/news/index.html","id":"randomizr-0220","dir":"Changelog","previous_headings":"","what":"randomizr 0.22.0","title":"randomizr 0.22.0","text":"CRAN release: 2022-01-27 Added NEWS.md file track changes package. Removed suggests dependency blockTools per Prof. Ripley email (package removed CRAN) Added Graeme Blair contributor Small bug fixes Added permutation support random sampling functions","code":""}]
